{
  "hash": "7377292810f604ef49e48bbaeea793bc",
  "result": {
    "markdown": "---\ntitle: \"Introduction to git and knitr\"\nauthor: \"Jared Bennett, Zoe Vernon, Andrew Vaughn, James Duncan\"\ndate: \"2022-09-02\"\nformat:\n  pdf:\n    documentclass: article\n    margin-left: 30mm\n    margin-right: 30mm\n    toc: true\n  html:\n    theme: cosmo\n    css: ../../styles.css\n    toc: true\n    code-copy: true\n    code-block-background: true\nexecute:\n  freeze: auto\n---\n\n\n\n\n\n[PDF](./intro_git_knitr.pdf){.btn .btn-primary}\n\nIn this section we will learn and dicuss some tools that you will need to\ncomplete your first problem set, namely git and knitr (either Quarto, R\nMarkdown, or Rtex). At the end there are also resources about code style and a\ncouple notes to keep in mind when turning in your problem sets.\n\n## Getting started with Git and GitHub\n### Learning Objectives\n\n * Create a __remote__ repository on GitHub\n * Create a __local__ Git repository on your machine\n * Practice adding, and committing changes to your (local) Git repo\n * Practice pushing commited changes to a remote repo\n\n### Useful Links\n- A nice tutorial is available on the [Berkeley SCF github repo](https://github.com/berkeley-scf/tutorial-git-basics)\n- Using Git without having to enter your password over and over:\n  - Option 1: Use [Git Credential Manager](https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git#git-credential-manager) and HTTPS clone method, e.g., \n  \n      ```bash\n      git clone https://github.com/berkeley-scf/tutorial-git-basics.git\n      ```\n  \n  - Option 2: Use [SSH keys](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh) and SSH clone method, e.g., \n  \n      ```bash\n      git clone git@github.com:berkeley-scf/tutorial-git-basics.git\n      ```\n  \n  - Either way, be sure to follow the instructions for your OS (Mac, Windows, or Linux) by selecting it at the top of the page.\n  \n- [git-scm.com](https://git-scm.com) has a number useful resources for learning Git, including:\n\n    - [Pro Git book](https://git-scm.com/book/en/v2)\n    \n    - [Command reference manual](https://git-scm.com/docs)\n\n### Create a New GitHub Repository\n\nThere are two ways to start a repository:\n\n- Create the repository on GitHub using your browser and then use `git clone`.\n- Use `git init` on your machine and then link it to a remote server, e.g. GitHub..\n\nWe're going to cover creating one online using Berkeley's GitHub Enterprise instance:\n\n- Open your browser and Sign in to your [github.berkeley.edu](https://github.berkeley.edu/) account.\n- Locate the `+` button (next to your avatar).\n- Select the `New repository` option.\n- Choose a name for your repository: e.g. `demo-repo`.\n- In the __Description__ field add a brief description: e.g. \"this is a demo repo\"\n- Check \"Add .gitignore\" and type \"R\" to find one that is tailored to R projects. This stops items like `.Rhistory` files from being added to your repo.\n- Click the green button __Create repository__.\n\n:::{.callout-note}\n\nWhen you first create a local repo on your machine using `git init`, the default\nbranch name is `master`. However, the default branch when you create one on\nGitHub is called `main`, so if you later decide to add a remote copy of your\nlocal repo to GitHub, you will need to update the name of your default branch.\nAfter creating the blank repo on GitHub (no `README.md` or `.gitignore`), run\nthe commands that GitHub provides in your local repo to change the default\nbranch from `master` to `main`.\n\n:::\n\n\n### Adding a README file\n\nInitially, your repo is located on GitHub. To set it up locally, you must clone\nthe repository from GitHub, e.g.:\n\n```bash\n# replace `https://github.com/berkeley-scf/tutorial-git-basics` with\n# the URL / clone method (HTTPS or SSH) for your new repo\ngit clone https://github.com/berkeley-scf/tutorial-git-basics\n```\n\nIt is customary to add a `README.md` file at the top level (note that a blank\none was already added to your PS repo). This file must contain (at least) a\ndescription of what the repository is about. The following command will create a\n`README.md` file with some minimalist content:\n\n```bash\necho \"# Demo Repo\" >> README.md\n```\n\nNow you have a \"new\" file in your local repo, but this change has not been\nrecorded by Git. You can confirm this by checking the status of the repo:\n\n```bash\ngit status\n```\n\nNotice that Git knows that `README.md` is untracked, so let's add the changes to\nGit's database:\n\n```bash\ngit add README.md\n```\n\nCheck the status of the repo again:\n\n```bash\ngit status\n```\n\nNow Git is tracking the file `README.md`. Next, the changes need to _committed_\nto the repository. You can use the `-m` option to write a message inline. It's\na good idea to keep your commit messages succinct but informative.\n\n```bash\ngit commit -m \"Add README\"\n```\n\nIn general, it is best to make frequent small commits rather than infrequent\nlarge commits. For example, you might want to make a single commit for each\nproblem in a problem set, rather than a single commit for the full problem set.\n\n:::{.callout-warning}\n\nIf you run `git commit` without `-m`, Git will launch a default text editor,\nusually `vi` or `vim`. If you this happens unintentionally, you can quit by\ntyping `ESC` followed by `:` and then `q!` followed by `Enter`. \n\nYou can specify which editor Git should use using `git config`. Take a look at\nthis\n[documentation](https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config)\nto learn how.\n\n:::\n\n### Examining changes while editing\n\nOnce you create a commit, it becomes a part of your repo's history. You can see\nthe history using `git log`:\n\n```bash\n# this usually opens in `less`\n# type `Q` to quit and return to the bash shell\ngit log\n```\n\nLet's make a change to `README.md`, which is now tracked by Git.\n\n```bash\necho \"Nothing to see here.\" >> README.md\n```\n\n`git status` will show that `README.md` was modified, along with other\nuseful information. But it won't actually show the _differences_ between your\nrepo's history and the current un-committed state. To see this, there is another\nextremely useful command:\n\n```bash\n# this also typically opens in `less`\ngit diff\n\n# you can also check a specific file or directory\ngit diff README.md\n```\n\n### Pushing changes to a remote repo\n\nNow that you have linked your local repo with your remote repo, you can start\npushing (i.e., uploading) commits to GitHub. As part of the basic workflow with\nGit and GitHub, you want to frequently check the status of your repo:\n\n```bash\ngit status\n```\n\nNow let's push your recent commit to the remote branch (`origin`) from\nthe local branch (`main`):\n\n```bash\ngit push origin main\n```\n\nGo to your Github repository and refresh the browser. If everything went fine,\nyou should be able to see the contents of your customized `README.md` file.\n\nIf you or a collaborator make changes on your remote repo you must __pull__ the\nremote repo into your local repo before you attempt to __push__ the changes you\nmade locally.\n\n```bash\ngit pull\n```\nIn summary, if you want to use git add files to a GitHub repo, the steps are:\n\n**Step 0:** _Pull_ the repo (This is necessary if your local repo is \"out of date'', meaning there are changes on the remote repo that are not present in your local repo. This is not necessary if your local repo contains the most recently made changes.)\n\n**Step 1:** Make edits to/create new files in your local repo. Check on _status_ and _diff_erences frequently.\n\n**Step 2:** _Add_ the files you edited/created.\n\n**Step 3:** _Commit_ your update with a helpful message.\n\n**Step 4:** _Push_ the update to the main branch.\n\n### Practice exercises\n\n:::{.callout-tip collapse=\"true\"}\n## Practice exercise 0: Configure git and clone the course website repo\n\na. Use `git config` to configure your identity, like the following example:\n\n    ```bash\n    git config --global user.name \"Oski Bear\"\n    git config --global user.email oski@berkeley.edu\n    ```\n    \n    For more info on configuring Git, see [here](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup).\n\n\na. If you haven't already, clone the GitHub repo for the course website:\n\n    ```bash\n    # HTTPS\n    git clone https://github.com/berkeley-stat243/stat243-fall-2022.git\n\n    # SSH\n    git clone git@github.com:berkeley-stat243/stat243-fall-2022.git\n    ```\n\n    You can find the source for this lab in `labs/01/intro_git_knitr.Rmd`\n    \n:::\n\n:::{.callout-tip collapse=\"true\"}\n## Practice exercise 1: Add a `.gitignore` to your PS submission repo.\n\nNow that you know how to clone a repo, add files, commit, and push to GitHub, try the following on your laptop:\n\na. Clone your PS submission repo.\n\na. Copy the R-tailored `.gitignore` file from the demo repo you created above to the root directory of your local copy of the repo.\n\na. `cd` to your local repo and use `git status` to confirm that `.gitignore` is\n   untracked, then add it and commit with an informative message.\n\na. Visit [GitHub's gitignore repo](https://github.com/github/gitignore), go to\n   the \"Global\" subdirectory, and find the `.gitignore` template for your\n   operating system (e.g., `macOS.gitignore`).\n\na. Add the contents of the OS-specific `.gitignore` template to the end of your\n   PS submission repo's `.gitignore` and save the file.\n\na. Use a git command to check the changes you made.\n\na. Add the changes, commit with an informative message, and push them to the remote repo.\n\n:::\n\n:::{.callout-tip collapse=\"true\"}\n## Practice exercise 2: Clone your PS submission repo on the SCF.\n\nIn general, you can feel free to work with your repo on your laptop. But in case\nyou need the code on the SCF, you can try the following steps:\n\na. `ssh` to one of the SCF machines.\n\na. (Optional) Find / create an SSH key and add it to your account at [github.berkeley.edu](https://github.berkeley.edu/).\n\na. Clone your PS submission repo somewhere in your SCF home directory.\n\na. On your laptop, make some minor change to the `README.md`. For example, you\n   can add a description line like \"STAT 243 PS submission repo.\"\n\na. Add, commit, and push the change.\n\na. Back on the SCF, `cd` into your repo and run `git pull` to update that copy\n   of your repo with the changes you just made on your laptop!\n\n:::\n\n\n## knitr and R Markdown Files\n\n### Learning Objectives:\n\n - Differentiate between `.R` and `.Rmd` files\n - Understand dynamic documents\n - Gain familiarity with R Markdown `.Rmd` files\n - Gain familiarity with code chunks\n\n### Useful Links\n- SCF tutorial on [dynamic documents](https://github.com/berkeley-scf/tutorial-dynamic-docs)\n- [knitr in a knutshell](http://kbroman.org/knitr_knutshell/) tutorial with information about R Markdown and knitr with LaTeX.  \n- [R Markdown cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)\n- Complete R Markdown [guide](https://bookdown.org/yihui/rmarkdown/)\n- R Sweave [tutorial](https://www.r-bloggers.com/sweave-tutorial-1-using-sweave-r-and-make-to-generate-a-pdf-of-multiple-choice-questions/)\n\n### Opening and knitting an `Rmd` file\n\nIn the menu bar of RStudio, click on __File__, then __New File__,\nand choose __R Markdown__. Select the default option (Document),\nand click __OK__. RStudio will open a new `.Rmd` file in the source pane.\nAnd you should be able to see a file with some default content.\n\nLocate the button __Knit__, the one with an icon of a ball of yarn and two \nneedles. Click the button (knit to HTML) so you can see how `Rmd` files are \nrendered and displayed as HTML documents. Alternatively, you can use a keyboard \nshortcut: in Mac `Command+Shift+K`, in Windows and Linux `Ctrl+Shift+K`\n\n### What is an `Rmd` file?\n\n__Rmd__ files are a special type of file, referred to as a _dynamic document_.\nThis is the fancy term we use to describe a document that allows us to combine \nnarrative (text) with R code in one single file.\n\nRmd files are plain text files. This means that you can open an Rmd file with\nany text editor (not just RStudio) to see and edit its contents.\n\nThe main idea behind dynamic documents is simple yet very powerful: instead of \nworking with two separate files, one that contains the R code, and \nanother one that contains the narrative, you use an `.Rmd` file to include \nboth the commands and the narrative.\n\nOne of the main advantages of this paradigm is that you avoid having to copy\nresults from your computations and paste them into a report file. In fact, there\nare more complex ways to work with dynamic documents and source files. But the\ncore idea is the same: combine narrative and code in a way that lets the\ncomputer do the manual, repetitive, and time consuming job.\n\nRmd is just one type of dynamic document that you will find in RStudio. In fact,\nRStudio provides other file formats that can be used as dynamic documents: e.g.,\n`.Rnw` (R Sweave), `.Rhtml` (R HTML), and `.qmd` (Quarto).\n\n\n### Anatomy of an `Rmd` file\n\nThe structure of an `.Rmd` file can be divided in two parts: 1) a __YAML\nheader__ (also called YAML metadata), and 2) the __body__ of the document. In\naddition to this structure, you should know that `.Rmd` files typically use\nthree types of syntaxes: YAML, Markdown, and R.\n\nThe _YAML header_ consists of the first few lines at the top of the file. This\nheader is established by a set of three dashes `---` as delimiters (one starting\nset, and one ending set). This part of the file requires you to use YAML syntax\n(Yet Another Markup Language.) Within the delimiter sets of dashes, you specify\nsettings (or metadata) that will apply to the entire document. Some of the\ncommon options are things like:\n\n- `title`\n- `author`\n- `date`\n- `output`\n\nThe _body_ of the document is everything below the YAML header. It consists \nof a mix of narrative and R code. All the text that is narrative is written \nin a markup syntax called __Markdown__ (although you can also use LaTeX math \nnotation). In turn, all the text that is code \nis written in R syntax inside _blocks of code_ (see below). \n\n### How does an Rmd file work?\n\nRmd files are plain text files. All that matters is the syntax of its content. \nThe content is basically divided in the header, and the body.\n\n- The header uses YAML syntax.\n- The narrative in the body uses Markdown syntax.\n- The code and commands use R syntax.\n\nThe process to generate a nice rendered document from an Rmd file is \nknown as __knitting__. When you _knit_ an Rmd file, various R packages \nand programs run behind the scenes. But the process can be broken down\nin three main phases: 1) Parsing, 2) Execution, and 3) Rendering.\n\nParsing refers to examining line by line to identified components as yaml \nheader, or as markdown text, or as R code.\n\nEach component receives a special treatment and formatting.\n\nThe most interesting part is in the pieces of text that are R code.\nThose are separated and executed if necessary. The commands may be included \nin the final document. Also, the output may be included in the final document.\nSometimes, nothing is executed nor included.\n\nDepending on the specified output format (e.g. HTML, pdf, word), all the\ncomponents are assembled, and one single document is generated.\n\n\n### Yet Another Syntax to Learn\n\nR markdown (`Rmd`) files use [markdown](https://daringfireball.net/projects/markdown/)\nas the main syntax to write content.Markdown is a very lightweight type of markup \nlanguage, and it is relatively easy to learn.\n\nOne of the most common sources of confusion when learning about R and Rmd \nfiles has to do with the hash symbol `#`. As you know, `#` is the character \nused by R to indicate comments. The issue is that the `#` character has a \ndifferent meaning in markdown syntax. Hashes in markdown are used to define \nlevels of headings.\n\nIn an Rmd file, a hash `#` that is inside a code chunk will be treated as \nan R comment. A hash outside a code chunk, will be treated as markdown syntax, \nmaking its associated text a given type of heading.\n\n### Blocks of code: Code chunks vs. inline code\n\nThere are two types of blocks of code: \n\n1. __code chunks__\n2. __inline code__.\n\n#### Inline code\n\nInline code is code inserted within a line of narrative text between backticks\n(`). For example, here's a small bit of raw Markdown:\n\n\n\n\n````markdown\n**Important**: Edit your `README.md`.\n````\n\n\nAnd here's what that looks like when rendered:\n\n**Important**: Edit your `README.md`.\n\nOftentimes, inline code blocks are simply a way to improve the formatting of our\ndocument and aren't used for computation, but they can run R code using the following syntax:\n\n\n\n\n````markdown\nI like to eat `r pi`.\n````\n\n\nResult: I like to eat 3.1415927.\n\nThis is helpful when you're describing results and don't want to hard-code a\nnumber or the amount of repititions you ran. Instead, you can use variables from\nprevious code chunks in the document.\n\n#### Code chunks\n\nThese are the most important blocks of code because they typically include the R\ncomputations that will run when you knit the document.\n\nCode chunks are lines of text (typically in the syntax of a specific programming\nlanguage such as R) separated from any lines of narrative (in Markdown syntax)\nby the special Markdown syntax ``` (three backticks). For example:\n\n\n\n\n````markdown\n```{r my-chunk, echo = FALSE}\n\npar(mfrow = c(2, 3))\n\nfor (n in 10^seq(0, 5)) {\n    x <- rbinom(n, 100, 0.5)\n    hist(x)\n}\n\npar(mfrow = c(1, 1))\n\n```\n\n````\n\nThe opening backticks are followed by curly braces, the language (`r` for R), an\noptional (but highly recommended) name for the chunk (`my-chunk` here), and then\ncomma-separated chunk options (see below). \n\nNote the final three backticks at the bottom of the chunk --\nthese close the chunk and allow you to return to the narrative in Markdown. By\nadding the above example to an `.Rmd`, you would see the following output:\n\n::: {.cell}\n::: {.cell-output-display}\n![](intro_git_knitr_files/figure-html/my-chunk-1.png){width=672}\n:::\n:::\n\nThe details aren't super important, but for those that are curious here is what\nhappens when we run **Knit**:\n\n- `knitr` evaluates the chunks that start with ````{r}` and inserts the results\ninto a intermediary markdown file. \n- It then calls Pandoc which converts the intermediary markdown to the next\nformat (possibly the output), repeating until the output format specified in the\nYAML header is reached.\n- For example, for PDF output, the sequence is: `.Rmd` -> `.md` -> `.tex` -> `.pdf`\n\n#### Code chunk options\n\nThere are dozens of options available to control the executation of the code, \nthe formatting and display of both the commands and the output, the display \nof images, graphs, and tables, and other fancy things. Here's a list of the \nbasic options you should become familiar with:\n\n- `cache`: whether to store the results from excecuted code, so that it does not need to be run on subsequent knits.  \n    + `TRUE`\n    + `FALSE`\n- `eval`: whether the code should be evaluated\n    + `TRUE`\n    + `FALSE`\n- `echo`: whether the code should be displayed\n    + `TRUE`\n    + `FALSE`\n    + numbers indicating lines in a chunk\n- `error`: whether to stop execution if there is an error\n    + `TRUE`\n    + `FALSE`\n- `results`: how to display the output\n    + `markup`\n    + `asis`\n    + `hold`\n    + `hide`\n- `comment`: character used to indicate output lines\n    + the default is a double hash `##`\n    + `\"\"` empty character (to have a cleaner display)\n    \n### LaTeX\n\nRmarkdown files render LaTeX through an external generator. This means that you can \nwrite any math equations or LaTeX syntax within a specific chunk, and install the \nrequired LaTeX libraries outside of R, and it will be rendered properly.\n\nInline code chunks are setoff with single dollar signs, ie `$\\beta$` is rendered \nas $\\beta$. This is great for small equations, Greek letters, and references to variables.\n\nLaTeX chunks can also be significantly more complicated. Independent chunks are \nsetoff with double dollar signs, ie `$$ Complex LaTeX Thing $$`, such as the following \nequation: \n$$\nD(\\theta_l,T_x) = \\left\\{\n         \\begin{array}{ll}\n             \\theta_{l[0]}^{'}=\\theta_l \t\t\t\t\t\t\t\t& \\quad i = 0 \\\\\n             \\theta_{l[i+1]}^{'} = \\theta_{l[i]}^{'} *F(\\overline{L_{[t-i-T_x]}})\t& \\quad i \\leq T_l\n         \\end{array}\n     \\right.\n$$\n\n\n \n\n## R Sweave \nAn alternative to R Markdown is R Sweave.  R Sweave knits R code together in the form of a LaTeX document.  There is an example R Sweave document `example_sweave.Rnw` included in this folder.  This can serve as a template for you if you choose to use this format for your problem sets.  \n\nThe options for code chunks listed in the Rmd section above are the same as the options used in Rnw code chunks.  As you can see in the `example_sweave.Rnw` document the syntax to designate code chunks is different.  In Sweave documents you will use <<>>= to start the chunk and @ to end the chunk.  \n\nTo compile the PDF click the __Compile PDF__ button.   \n\n### Updating Preferences to knit using knitr\nSweave is older way to knit together code and text, while knitr is more updated and \nallows for better formatting.  By default R Studio sets R Sweave documents to be run using \nSweave to switch to knitr open the __RStudio__ menu in the menu bar, and choose __Preferences__. In __Preferences__ go to the __Sweave__ tab and change the PDF generation to Weave Rnw \nfiles using knitr.  \n\n### Opening an R Sweave\nIn the menu bar of RStudio, click on __File__, then __New File__,\nand choose __R Sweave__. Select the default option (Document),\nand click __Ok__. RStudio will open a new `.Rnw` file in the source pane.\nAnd you should be able to see a file with some default content.\n\nIf you opened an Rnw file before changing the from Sweave to knitr, the default content will contain `\\SweaveOpts{concordance=TRUE}` you will need to remove this line of code if you have changed the preferences to generate the PDF \nusing knitr. \n\n## Rtex\nThe final option is to use the Rtex file format. This file format again uses knitr to combine code chunks with text in the form of a LaTeX document. \n\nFor instructions of how to use this see the [dynamic documents](https://github.com/berkeley-scf/tutorial-dynamic-docs) tutorial.  The integration with RStudio is not great, so there is no automated way to open a .Rtex file from RStudio's menu.  Also you will need to use the command line to compile.  \n\n## Code style \n\n### Useful Links\n- [Homework Submission](https://berkeley-stat243.github.io/stat243-fall-2022/howtos/ps-submission.html)\n- [Hadley Wickham Style Guide](https://style.tidyverse.org/)\n- [Google's R Style Guide](https://google.github.io/styleguide/Rguide.html)\n- [Weird One with Links](https://jef.works/R-style-guide/)\n\n### Additional notes on style\nYou don't need to follow the exact style of any of those - use your own judgment and figure out what style you like and be consistent in using that style. But you should do the following:\n\n - use white space to make it easier to read your code\n - have your code lines be no more than 80 characters\n - give your objects and functions meaningful (and not overly long) names\n - comment your code\n - indent your code as needed so one can see what lines of code go together in a block\n\nYou should NOT include periods in names of objects (this contradicts Google's style guide). The reason is that periods are used to mean something specific in R's S3 object oriented programming syntax (e.g., `predict.lm`) and that periods are used in other languages specifically for object-oriented syntax. So I'd suggest either `calculate_mle` or `calculateMLE`, not `calculate.mle`. \n\n## Acknowledgements\n\nThis lab was originally authored by Jared Bennett and updated incrementally by\nZoe Vernon, Andrew Vaughn, and James Duncan.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}