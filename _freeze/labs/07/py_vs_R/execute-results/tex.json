{
  "hash": "ad4a7efc72e53fa8a0f3ad29123bf55f",
  "result": {
    "markdown": "---\ntitle: \"Python vs. R\"\nauthor: \"Zoe Vernon, Andrew Vaughn, James Duncan\"\ndate: \"2022-10-14\"\nformat:\n  pdf:\n    documentclass: article\n    margin-left: 30mm\n    margin-right: 30mm\n    toc: true\n  html:\n    theme: cosmo\n    css: ../../styles.css\n    toc: true\n    code-copy: true\n    code-block-background: true\nexecute:\n  freeze: auto\n---\n\n\n[PDF](./py_vs_R.pdf){.btn .btn-primary}\n\n# Comparing the Behavior of Python and R\n\nThis week, we will be exploring the behavior of Python for several common\nactions that we have previously covered in R. The final product of today's work\nwill be a PDF which is uploaded as a group submission to Gradescope.\n\nFor quick reference, there is some example Python code in `syntax.py`.\n\n## Instructions\n\n:::{.callout-important} \n\nPlease carefully read the full instructions before starting the assignment, as\nyou will need to decide with your group how to organize and combine your\nefforts.\n\n:::\n\nYour group is expected to work on this for **~60 minutes** (so office hours will be\ncut short by about 10 minutes today). \n\nIt's OK if you don't get through all of the questions in one hour (i.e., you can\njust submit what you have at the end of section), but it should be clear that\nyou put some thought and effort into the questions your group worked on.\n\n:::{.callout-tip}\nDo your best to document your efforts and insights as you go.\n:::\n\n1. We will separate into groups of (ideally) 3 or (if necessary) 4. I'll try to\nmake sure that each group has at least one person with some Python experience,\nso **please wait to get started** until we've figured that out.\n\n1. Groups should try to answer every question in the [Main Questions](#main-questions) section.\nHere are some **options** for working through these questions:\n    \n    - Option A -- **Divide, consult, conquer**: Individual group members work on different\n    questions, consulting with each other as they go or as needed.\n    \n    - Option B -- **Many minds, one task**: The group works together, discussing and\n    answering each question sequentially.\n    \n    - Option C -- **Go with the flow**: Feel free to use a flexible mixture of\n    Option A and Option B, working separately on some tasks and uniting on\n    others as you see fit.\n    \n1. At the end of section (say, the last ~10-15 minutes), combine the solutions\ninto **one PDF**. Each group member will then **individually submit** copies of\nthis PDF on Gradescope.\n\n    - Make sure to include the name of each group member at the top of the PDF.\n\n    - How you create the PDF is up to you but some **options** are: \n    \n        a. (recommended) Using **Google Docs**.\n            \n            - _Separate documents, then combine_: Each group member uses a separate Google Doc, then one person combines those documents into a final shared document.\n\n            - _One document_: Everyone adds to a single document at the same time.\n                        \n            - You can take screenshots of code / outputs that you run in Jupyter or RStudio (alternatively, the IPython or R consoles), or just copy paste code and outputs directly to the document.\n            \n            - When your final shared document is ready, each group member will export it to PDF and make individual submission to Gradescope.\n        \n        a. Create an **R Markdown** file with the code and render to PDF. This may be\n        more of a headache to combine if each person is working separately.\n        \n        a. Create a **Jupyter Notebook** and export to PDF.\n        \n            - In JupyterLab, **File > Save and Export Notebook As... > PDF**.\n            \n            - In the classic Jupyter Notebook interface, **File > Download as > PDF via LaTeX (.pdf)**.\n\n## Questions\n\n### Main Questions\n\n:::{.callout-tip}\n\nIdeally, you will make it through all of these, although if you run out of time\nthat is okay.\n\n:::\n\n1. Do Python functions behave like pass-by-value or pass-by-reference? In other\nwords, if you pass in an object and modify it, does that affect the value of the\nobject in the environment from which the function was called? Check this for a\nscalar, a list, and a `numpy` array.\n\n1. If you copy a list, dictionary, or `numpy` array in Python, are the values\ncopied or does the new object just use the same memory as the original object?\n\n1. How are `NA`s handled in Python lists? What about in `numpy` arrays?\n\n1. Do Python functions use promises/lazy evaluation?\n\n1. How does variable scoping work in Python - does it use lexical scoping and \nlook for variables in the environment where a function was defined?\n\n1. Consider the relative efficiency of `for` loops versus vectorized\ncalculations for `numpy` arrays and see how it compares to the equivalent\noperation in R.\n\n1. Can lists and `numpy` arrays be modified in place, without copying the\n   object?\n\n1. Consider whether Python allows you to have functions and variables in the\nglobal environment that have the same names as functions/variables in packages\nor in modules (e.g., make a file `test.py` in your working directory that you\ncan import using `import test`). Consider `math.cos` and create your own `cos`\nfunction. How does this compare to how R finds objects?\n\n\n### Additional Questions\n\n:::{.callout-tip}\n\nWork on these if you finish quickly/are curious\n\n:::\n\n1. Can you create a closure with embedded data, like we did in R?\n\n1. Can you determine if the speed of looking up values in a dictionary varies \nwith the size of the dictionary (this will indicate if something like hashing is \ngoing on or if the look up has to scan through all the elements).\n\n1. Compare the Python debugger to R's debugger.\n\n1. If you create classes and objects in Python's object-oriented system, what are \nthe similarities and differences relative to R's R6 system? There is a brief section \non object-oriented programming in Python in the lab 6 materials.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}