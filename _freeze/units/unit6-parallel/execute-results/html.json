{
  "hash": "e4ca7a8e8d09d6c428d6485b507ffa68",
  "result": {
    "markdown": "---\ntitle: \"Parallel processing\"\nauthor: \"Chris Paciorek\"\ndate: \"2022-09-30\"\nformat:\n  pdf:\n    documentclass: article\n    margin-left: 30mm\n    margin-right: 30mm\n    toc: true\n  html:\n    theme: cosmo\n    css: ../styles.css\n    toc: true\n    code-copy: true\n    code-block-background: true\nexecute:\n  freeze: auto\n---\n\n\n\n[PDF](./unit6-parallel.pdf){.btn .btn-primary}\n\nReferences:\n\n-   [Tutorial on parallel processing using Python's Dask and R's future packages](https://berkeley-scf.github.io/tutorial-dask-future)\n\n\nThis unit will be fairly Linux-focused as most serious parallel\ncomputation is done on systems where some variant of Linux is running.\nThe single-machine parallelization discussed here should work on Macs\nand Windows, but some of the details of what is happening under the hood\nare different for Windows.\n\n# 1. Some scenarios for parallelization\n\n-   You need to fit a single statistical/machine learning model, such as\n    a random forest or regression model, to your data.\n-   You need to fit three different statistical/machine learning models\n    to your data.\n-   You are running a prediction method on 10 cross-validation folds,\n    possibly using multiple statistical/machine learning models to do\n    prediction.\n-   You are running an ensemble prediction method such as *SuperLearner*\n    or *Bayesian model averaging* over 10 cross-validation folds, with\n    30 statistical/machine learning methods used for each fold.\n-   You are running stratified analyses on a very large dataset (e.g.,\n    running regression models once for each subgroup within a dataset).\n-   You are running a simulation study with n=1000 replicates. Each\n    replicate involves fitting 10 statistical/machine learning methods.\n\nGiven you are in such a situation, can you do things in parallel? Can\nyou do it on your laptop or a single computer? Will it be useful (i.e.,\nfaster or provide access to sufficient memory) to use multiple\ncomputers, such as multiple nodes in a Linux cluster?\n\nAll of the functionality discussed in this Unit applies ONLY if the\niterations/loops of your calculations can be done completely separately\nand do not depend on one another; i.e., you can do the computation as\nseparate processes without communication between the processes. This\nscenario is called an *embarrassingly parallel* computation.\n\n## Embarrassingly parallel (EP) problems\n\nAn EP problem is one that can be solved by doing independent\ncomputations in separate processes without communication between the\nprocesses. You can get the answer by doing separate tasks and then\ncollecting the results. Examples in statistics include\n\n1.  simulations with many independent replicates\n2.  bootstrapping\n3.  stratified analyses\n4.  random forests\n5.  cross-validation.\n\nThe standard setup is that we have the same code running on different\ndatasets. (Note that different processes may need different random\nnumber streams, as we will discuss in the Simulation Unit.)\n\nTo do parallel processing in this context, you need to have control of\nmultiple processes. Note that on a shared system with\nqueueing/scheduling software set up, this will generally mean requesting\naccess to a certain number of processors and then running your job in\nsuch a way that you use multiple processors.\n\nIn general, except for some modest overhead, an EP problem can ideally\nbe solved with $1/p$ the amount of time for the non-parallel\nimplementation, given $p$ CPUs. This gives us a speedup of $p$, which is\ncalled linear speedup (basically anytime the speedup is of the form $kp$\nfor some constant $k$).\n\n# 2. Overview of parallel processing\n\n## Computer architecture\n\nComputers now come with multiple processors for doing computation.\nBasically, physical constraints have made it harder to keep increasing\nthe speed of individual processors, so the chip industry is now putting\nmultiple processing units in a given computer and trying/hoping to rely\non implementing computations in a way that takes advantage of the\nmultiple processors.\n\nEveryday personal computers usually have more than one processor (more\nthan one chip) and on a given processor, often have more than one core\n(multi-core). A multi-core processor has multiple processors on a single\ncomputer chip. On personal computers, all the processors and cores share\nthe same memory.\n\nSupercomputers and computer clusters generally have tens, hundreds, or\nthousands of 'nodes', linked by a fast local network. Each node is\nessentially a computer with its own processor(s) and memory. Memory is\nlocal to each node (distributed memory). One basic principle is that\ncommunication between a processor and its memory is much faster than\ncommunication between processors with different memory. An example of a\nmodern supercomputer is the Cori supercomputer at Lawrence Berkeley\nNational Lab, which has 12,076 nodes, and a total of 735,200 cores. Each\nnode has either 96 or 128 GB of memory for a total of 1.3 PB of memory.\n\nFor our purposes, there is little practical distinction between\nmulti-processor and multi-core situations. The main issue is whether\nprocesses share memory or not. In general, I won't distinguish between\ncores and processors. We'll just focus on the number of cores on given\npersonal computer or a given node in a cluster.\n\n## Some useful terminology:\n\n-   *cores*: We'll use this term to mean the different processing units\n    available on a single machine or node of a cluster.\n-   *nodes*: We'll use this term to mean the different computers, each\n    with their own distinct memory, that make up a cluster or\n    supercomputer.\n-   *processes*: instances of a program(s) executing on a machine;\n    multiple processes may be executing at once. A given program may\n    start up multiple processes at once. Ideally we have no more\n    processes than cores on a node.\n-   *workers*: the individual processes that are carrying out the\n    (parallelized) computation. We'll use *worker* and *process*\n    interchangeably.\n-   *tasks*: individual units of computation; one or more tasks will be\n    executed by a given process on a given core.\n-   *threads*: multiple paths of execution within a single process; the\n    operating system sees the threads as a single process, but one can think of them\n    as 'lightweight' processes. Ideally when considering the processes\n    and their threads, we would the same number of cores as we have\n    processes and threads combined.\n-   *forking*: child processes are spawned that are identical to the\n    parent, but with different process IDs and their own memory. In some\n    cases if objects are not changed, the objects in the child process\n    may refer back to the original objects in the original process,\n    avoiding making copies.\n-   *sockets*: some of R's parallel functionality involves creating new\n    R processes (e.g., starting processes via `Rscript`) and\n    communicating with them via a communication technology called\n    sockets.\n-   *scheduler*: a program that manages users' jobs on a cluster.\n    *Slurm* is a commonly used scheduler.\n-   *load-balanced*: when all the cores that are part of a computation\n    are busy for the entire period of time the computation is running.\n\n## Distributed vs. shared memory\n\nThere are two basic flavors of parallel processing (leaving aside GPUs):\ndistributed memory and shared memory. With shared memory, multiple\nprocessors (which I'll call cores for the rest of this document) share\nthe same memory. With distributed memory, you have multiple nodes, each\nwith their own memory. You can think of each node as a separate computer\nconnected by a fast network.\n\n### Shared memory\n\nFor shared memory parallelism, each core is accessing the same memory so\nthere is no need to pass information (in the form of messages) between\ndifferent machines. However, unless one is using threading (or in some\ncases when one has processes created by forking), objects will still be\ncopied when creating new processes to do the work in parallel. With\nthreaded computations, multiple threads can access object(s) without\nmaking explicit copies. But in some programming contexts one needs to be\ncareful that the threads on different cores doesn't mistakenly overwrite\nplaces in memory that are used by other cores (this is not an issue in\nR).\n\nWe'll cover two types of shared memory parallelism approaches in this\nunit:\n\n-   threaded linear algebra\n-   multicore functionality\n\n#### Threading\n\nThreads are multiple paths of execution within a single process. If you\nare monitoring CPU usage (such as with `top` in Linux or Mac) and\nwatching a job that is executing threaded code, you'll see the process\nusing more than 100% of CPU. When this occurs, the process is using\nmultiple cores, although it appears as a single process rather than as\nmultiple processes.\n\nNote that this is a different notion than a processor that is\nhyperthreaded. With hyperthreading a single core appears as two cores to\nthe operating system.\n\n### Distributed memory\n\nParallel programming for distributed memory parallelism requires passing\nmessages between the different nodes. The standard protocol for doing\nthis is MPI, of which there are various versions, including `openMPI`.\n\nWhile there are various R (e.g., `Rmpi` and the `pbdR`\npackages) and Python packages that use MPI behind the scenes, we'll only cover distributed\nmemory parallelization via the `future` package and `Dask`, which don't use\nMPI.\n\n## Some other approaches to parallel processing\n\n### GPUs\n\nGPUs (Graphics Processing Units) are processing units originally\ndesigned for rendering graphics on a computer quickly. This is done by\nhaving a large number of simple processing units for massively parallel\ncalculation. The idea of general purpose GPU (GPGPU) computing is to\nexploit this capability for general computation.\n\nMost researchers don't program for a GPU directly but rather use\nsoftware (often machine learning software such as Tensorflow or PyTorch,\nor other software that automatically uses the GPU such as JAX)\n that has been programmed to take advantage of a GPU if one is\navailable. The computations that run on the GPU are run in GPU *kernels*,\nwhich are functions that are launched on the GPU. The overall workflow\nruns on the CPU and then particular (usually computationally-intensive\ntasks for which parallelization is helpful) tasks are handed off to the GPU.\nGPUs and similar devices (e.g., TPUs) are often called \"co-processors\"\nin recognition of this style of workflow.\n\nThe memory on a GPU is distinct from main memory on the computer, so\nwhen writing code that will use the GPU, one generally wants to avoid\nhaving large amounts of data needing to be transferred back and forth between\nmain (CPU) memory and GPU memory. Also, since there is overhead in\nlaunching a GPU kernel, one wants to avoid launching a lot of kernels\nrelative to the amount of work being done by each kernel. \n\n### Spark and Hadoop\n\nSpark and Hadoop are systems for implementing computations in a\ndistributed memory environment, using the MapReduce approach, as\ndiscussed in Unit 7.\n\n### Cloud computing\n\nAmazon (Amazon Web Services' EC2 service), Google (Google Cloud\nPlatform's Compute Engine service) and Microsoft (Azure) offer computing\nthrough the cloud. The basic idea is that they rent out their servers on\na pay-as-you-go basis. You get access to a virtual machine that can run\nvarious versions of Linux or Microsoft Windows server and where you\nchoose the number of processing cores you want. You configure the\nvirtual machine with the applications, libraries, and data you need and\nthen treat the virtual machine as if it were a physical machine that you\nlog into as usual. You can also assemble multiple virtual machines into\nyour own virtual cluster and use platforms such as Spark on the cloud\nprovider's virtual machines.\n\n# 3. Parallelization strategies\n\nSome of the considerations that apply when thinking about how effective\na given parallelization approach will be include:\n\n-   the amount of memory that will be used by the various processes,\n-   the amount of communication that needs to happen -- how much data\n    will need to be passed between processes,\n-   the latency of any communication - how much delay/lag is there in\n    sending data between processes or starting up a worker process, and\n-   to what extent do processes have to wait for other processes to\n    finish before they can do their next step.\n\nThe following are some basic principles/suggestions for how to\nparallelize your computation.\n\n-   Should I use one machine/node or many machines/nodes?\n    -   If you can do your computation on the cores of a single node\n        using shared memory, that will be faster than using the same\n        number of cores (or even somewhat more cores) across multiple\n        nodes. Similarly, jobs with a lot of data/high memory\n        requirements that one might think of as requiring Spark or\n        Hadoop may in some cases be much faster if you can find a single\n        machine with a lot of memory.\n    -   That said, if you would run out of memory on a single node, then\n        you'll need to use distributed memory.\n-   What level or dimension should I parallelize over?\n    -   If you have nested loops, you generally only want to parallelize\n        at one level of the code. That said, in this unit we'll see some\n        tools for parallelizing at multiple levels. Keep in mind whether\n        your linear algebra is being threaded. Often you will want to\n        parallelize over a loop and not use threaded linear algebra\n        within the iterations of the loop.\n    -   Often it makes sense to parallelize the outer loop when you have\n        nested loops.\n    -   You generally want to parallelize in such a way that your code\n        is load-balanced and does not involve too much communication.\n-   How do I balance communication overhead with keeping my cores busy?\n    -   If you have very few tasks, particularly if the tasks take\n        different amounts of time, often some processors will be idle\n        and your code poorly load-balanced.\n    -   If you have very many tasks and each one takes little time, the\n        overhead of starting and stopping the tasks will reduce\n        efficiency.\n-   Should multiple tasks be pre-assigned (statically assigned) to a\n    process (i.e., a worker) (sometimes called *prescheduling*) or\n    should tasks be assigned dynamically as previous tasks finish?\n    -   To illustrate the difference, suppose you have 6 tasks and 3\n        workers. If the tasks are pre-assigned, worker 1 might be\n        assigned tasks 1 and 4 at the start, worker 2 assigned tasks 2\n        and 5, and worker 3 assigned tasks 3 and 6. If the tasks are\n        dynamically assigned, worker 1 would be assigned task 1, worker\n        2 task 2, and worker 3 task 3. Then whichever worker finishes\n        their task first (it woudn't necessarily be worker 1) would be\n        assigned task 4 and so on.\n    -   Basically if you have many tasks that each take similar time,\n        you want to preschedule the tasks to reduce communication. If\n        you have few tasks or tasks with highly variable completion\n        times, you don't want to preschedule, to improve load-balancing.\n    -   For R in particular, some of R's parallel functions allow you to\n        say whether the tasks should be prescheduled. In the future\n        package, `future_lapply` has arguments `future.scheduling` and\n        `future.chunk.size`. Similarly, there is the `mc.preschedule`\n        argument in `mclapply()`.\n\n# 4. Introduction to the future package\n\nBefore we illustrate implementation of various kinds of parallelization,\nI'll give an overview of the `future` package, which we'll use for many\nof the implementations. The future package has been developed over the\nlast few years and provides some nice functionality that is easier to\nuse and more cohesive than the various other approaches to\nparallelization in R.\n\nOther approaches include `parallel::parLapply`, `parallel::mclapply`,\nthe use of `foreach` without `future`, and the `partools` package.\nThe `partools` package is interesting. It tries to take the parts of\nSpark/Hadoop most relevant for statistics-related work -- a distributed\nfile system and distributed data objects -- and discard the parts that\nare a pain/not useful -- fault tolerance when using many, many\nnodes/machines.\n\n## Overview: Futures and the R future package\n\nWhat is a *future*? It's basically a flag used to tag a given operation\nsuch that when and where that operation is carried out is controlled at\na higher level. If there are multiple operations tagged then this allows\nfor parallelization across those operations.\n\nAccording to Henrik Bengtsson (the `future` package developer) and those\nwho developed the concept:\n\n-   a future is an abstraction for a value that will be available later\n-   the value is the result of an evaluated expression\n-   the state of a future is either unresolved or resolved\n\nWhy use futures? The `future` package allows one to write one's\ncomputational code without hard-coding whether or how parallelization\nwould be done. Instead one writes the code in a generic way and at the\nbeginning of one's code sets the 'plan' for how the parallel computation\nshould be done given the computational resources available. Simply\nchanging the 'plan' changes how parallelization is done for any given\nrun of the code.\n\nMore concisely, the key ideas are:\n\n-   Separate what to parallelize from how and where the parallelization\n    is actually carried out.\n-   Different users can run the same code on different computational\n    resources (without touching the actual code that does the\n    computation).\n\n## Overview of parallel backends\n\nOne uses `plan()` to control how parallelization is done, including what\nmachine(s) to use and how many cores on each machine to use.\n\nFor example,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplan(multiprocess)\n## spreads work across multiple cores\n# alternatively, one can also control number of workers\nplan(multiprocess, workers = 4)\n```\n:::\n\n\n\nThis table gives an overview of the different plans.\n\n|       Type     |                 Description                |  Multi-node |   Copies of objects made?   |\n|  --------------| -------------------------------------------| ------------| ----------------------------|\n|   multisession |  uses additional R sessions as the workers |      no     |             yes |\n|    multicore   |   uses forked R processes as the workers   |      no     |  not if object not modified |\n|      remote    |    uses an R sessions on another machine    |     yes     |             yes |\n|     cluster    |     uses R sessions on other machine(s)    |     yes     |             yes |\n\n## Accessing variables and workers in the worker processes\n\nThe future package usually does a good job of identifying the packages and (global) variables\nyou use in your parallelized code and loading those packages on the workers and copying necessary variables to the workers.\nIt uses the `globals` package to do this.\n\nHere's a toy example that shows that `n` and `MASS::geyser` are automatically available in the worker processes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(future)\nlibrary(future.apply)\n\nplan(multisession)\n\nlibrary(MASS)\nn <- nrow(geyser)\n\nmyfun <- function(idx) {\n   # geyser is in MASS package\n   return(sum(geyser$duration) / n)\n}\n\nfuture_sapply(1:5, myfun)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.460814 3.460814 3.460814 3.460814 3.460814\n```\n:::\n:::\n\n\n\nIn other contexts in R (or other languages) you may need to explicitly copy objects to the workers (or load packages on the workers). This is sometimes called *exporting* variables. \n\n# 5. Illustrating the principles in specific case studies\n\n## Scenario 1: one model fit\n\n**Scenario**: You need to fit a single statistical/machine learning\nmodel, such as a random forest or regression model, to your data.\n\n### Scenario 1A:\n\nA given method may have been written to use parallelization and you\nsimply need to figure out how to invoke the method for it to use\nmultiple cores.\n\nFor example the documentation for the `randomForest` package doesn't\nindicate it can use multiple cores, but the `ranger` package can -- note\nthe `num.threads` argument.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(ranger::ranger)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (formula = NULL, data = NULL, num.trees = 500, mtry = NULL, \n    importance = \"none\", write.forest = TRUE, probability = FALSE, \n    min.node.size = NULL, max.depth = NULL, replace = TRUE, sample.fraction = ifelse(replace, \n        1, 0.632), case.weights = NULL, class.weights = NULL, \n    splitrule = NULL, num.random.splits = 1, alpha = 0.5, minprop = 0.1, \n    split.select.weights = NULL, always.split.variables = NULL, \n    respect.unordered.factors = NULL, scale.permutation.importance = FALSE, \n    local.importance = FALSE, regularization.factor = 1, regularization.usedepth = FALSE, \n    keep.inbag = FALSE, inbag = NULL, holdout = FALSE, quantreg = FALSE, \n    oob.error = TRUE, num.threads = NULL, save.memory = FALSE, \n    verbose = TRUE, seed = NULL, dependent.variable.name = NULL, \n    status.variable.name = NULL, classification = NULL, x = NULL, \n    y = NULL, ...) \nNULL\n```\n:::\n:::\n\n\n\n### Scenario 1B:\n\nIf a method does linear algebra computations on large matrices/vectors,\nR can call out to parallelized linear algebra packages (the BLAS and\nLAPACK).\n\nThe BLAS is the library of basic linear algebra operations (written in\nFortran or C). A fast BLAS can greatly speed up linear algebra in R\nrelative to the default BLAS that comes with R. Some fast BLAS libraries\nare\n\n-   Intel's *MKL*; available for educational use for free\n-   *OpenBLAS*; open source and free\n-   *vecLib* for Macs; provided with your Mac\n\nIn addition to being fast when used on a single core, all of these BLAS\nlibraries are threaded - if your computer has multiple cores and there\nare free resources, your linear algebra will use multiple cores,\nprovided your program is linked against the threaded BLAS installed on\nyour machine and provided the environment variable OMP_NUM_THREADS is\nnot set to one. (Macs make use of VECLIB_MAXIMUM_THREADS rather than\nOMP_NUM_THREADS.)\n\nThreading in R is limited to linear algebra, provided R is linked\nagainst a threaded BLAS.\n\nHere's some code that illustrates the speed of using a threaded BLAS:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RhpcBLASctl)\nx <- matrix(rnorm(5000^2), 5000)\n\nblas_set_num_threads(4)\nsystem.time({\n   x <- crossprod(x)\n   U <- chol(x)\n})\n\n##   user  system elapsed \n##  8.316   2.260   2.692 \n\nblas_set_num_threads(1)\nsystem.time({\n   x <- crossprod(x)\n   U <- chol(x)\n})\n\n##   user  system elapsed \n##  6.360   0.036   6.399 \n```\n:::\n\n\n\nHere the elapsed time indicates that using four threads gave us a\ntwo-three times (2-3x) speedup in terms of real time, while the user\ntime indicates that the threaded calculation took a bit more total\nprocessing time (combining time across all processors) because of the\noverhead of using multiple threads.\n\nNote that the code also illustrates use of an R package that can control\nthe number of threads from within R, but you could also have set\nOMP_NUM_THREADS before starting R.\n\nTo use an optimized BLAS with R, talk to your systems administrator, see\n[Section A.3 of the R Installation and Administration Manual](https://cran.r-project.org/doc/manuals/r-release/R-admin.html#BLAS), or see [these instructions](https://statistics.berkeley.edu/computing/blas)\nto use vecLib BLAS from Apple's Accelerate framework on your own Mac.\n\nIt's also possible to use an optimized BLAS with Python's `numpy` and\n`scipy` packages, on either Linux or using the Mac's *vecLib* BLAS.\nDetails will depend on how you install Python, numpy, and scipy.\n\n## Scenario 2: three different prediction methods on your data\n\n**Scenario**: You need to fit three different statistical/machine\nlearning models to your data.\n\nWhat are some options?\n\n-   use one core per model\n-   if you have rather more than three cores, apply the ideas here\n    combined with Scenario 1 above - with access to a cluster and\n    parallelized implementations of each model, you might use one node\n    per model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(future)\nntasks <- 3\nplan(multisession, workers = ntasks)\n\nn <- 10000000\nsystem.time({\n\tfut_p <- future(mean(rnorm(n)), seed = TRUE)\n\tfut_q <- future(mean(rgamma(n, shape = 1)), seed = TRUE)\n\tfut_s <- future(mean(rt(n, df = 3)), seed = TRUE)\n        p <- value(fut_p)\n        q <- value(fut_q)\n        s <- value(fut_s)\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  0.016   0.000   2.055 \n```\n:::\n\n```{.r .cell-code}\nsystem.time({\n\tp <- mean(rnorm(n))\n\tq <- mean(rgamma(n, shape = 1))\n\ts <- mean(rt(n, df = 3))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  3.038   0.050   3.090 \n```\n:::\n:::\n\n\n\nQuestion: Why might this not have shown a perfect three-fold speedup?\n\nIf we look at the future object (e.g., `fut_p`), we see that by default lazy evaluation is off\nand that the code executes *asynchronously*. Let's consider these ideas in more detail. The future will\nstart being evaluated right away -- this is non-lazy evaluation. The future will execute asynchronously,\nwhich means that the worker process will evaluate the future (in the background from the perspective of the\nmain process) while the main process can continue doing\nother things, in particular interacting with the user. This asynchronous evaluation is also called\na *non-blocking* call because execution of the task in the worker process does not block things from happening in the main process.\nHowever the call to `value()` is *synchronous* (and is a *blocking* call)  because it needs to returns a result, so control of the session\ndoes not return to the user until the value is available (i.e., once the future is done being evaluated).\n\nOne can change the future to use lazy evaluation.\n\nYou could also have used tools like `foreach` and `future_lapply` here\nas well, as we'll discuss next.\n\n## Scenario 3: 10-fold CV and 10 or fewer cores\n\n**Scenario**: You are running a prediction method on 10 cross-validation\nfolds.\n\nThis illustrates the idea of running some number of tasks using the\ncores available on a single machine. \n\nHere I'll illustrate parallel looping, using this simulated dataset and\nbasic use of `randomForest()`.\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nrandomForest 4.7-1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nType rfNews() to see new features/changes/bug fixes.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncvFit <- function(foldIdx, folds, Y, X, loadLib = FALSE) {\n    if(loadLib)\n        library(randomForest)\n    out <- randomForest(y = Y[folds != foldIdx],\n                        x = X[folds != foldIdx, ],\n                        xtest = X[folds == foldIdx, ])\n    return(out$test$predicted)\n}\n\nset.seed(23432)\n## training set\nn <- 1000\np <- 50\nX <- matrix(rnorm(n*p), nrow = n, ncol = p)\ncolnames(X) <- paste(\"X\", 1:p, sep=\"\")\nX <- data.frame(X)\nY <- X[, 1] + sqrt(abs(X[, 2] * X[, 3])) + X[, 2] - X[, 3] + rnorm(n)\nnFolds <- 10\nfolds <- sample(rep(seq_len(nFolds), each = n/nFolds), replace = FALSE)\n```\n:::\n\n\n\n### Using a parallelized for loop with `foreach`\n\nThe foreach package provides a `foreach` command that allows you to do\nthis easily. foreach can use a variety of parallel \"back-ends\", of which\nthe future package is one back-end (via the `doFuture` package) that\nprovides a lot of flexibility in what computational resources are used\nvia `plan()`. For our purposes here, we'll focus on using shared memory\ncores.\n\nNote that `foreach` also provides functionality for collecting and\nmanaging the results to avoid some of the bookkeeping you would need to\ndo if writing your own standard for loop. The result of `foreach` will\ngenerally be a list, unless we request the results be combined in\ndifferent way, using the `.combine` argument.\n\n\n\n::: {.cell hash='unit6-parallel_cache/html/unnamed-chunk-8_0837d55576cae0516ed2c94c3043bcba'}\n\n```{.r .cell-code}\nlibrary(doFuture)\nlibrary(doRNG)\nnCores <- 2\nplan(multisession, workers = nCores)\nregisterDoFuture()\n\n## Use of %dorng% from doRNG relates to parallel random number generation.\n## We'll see more in Unit 10 (Simulation)\n## If not using random number generation, people usually use %dopar%.\n\nresult <- foreach(i = seq_len(nFolds)) %dorng% {\n\tcat('Starting ', i, 'th job.\\n', sep = '')\n\toutput <- cvFit(i, folds, Y, X)\n\tcat('Finishing ', i, 'th job.\\n', sep = '')\n\toutput # this will become part of the out object\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStarting 1th job.\nFinishing 1th job.\nStarting 2th job.\nFinishing 2th job.\nStarting 3th job.\nFinishing 3th job.\nStarting 4th job.\nFinishing 4th job.\nStarting 5th job.\nFinishing 5th job.\nStarting 6th job.\nFinishing 6th job.\nStarting 7th job.\nFinishing 7th job.\nStarting 8th job.\nFinishing 8th job.\nStarting 9th job.\nFinishing 9th job.\nStarting 10th job.\nFinishing 10th job.\n```\n:::\n\n```{.r .cell-code}\nlength(list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nresult[[1]][1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        20         26         29         30         69 \n 2.6714476 -0.1169513  0.8114822 -1.1478375  0.5954467 \n```\n:::\n:::\n\n\n\nYou can debug by running serially using `%do%` rather than `%dopar%` or\n`%dorng%`. Note that you may need to load packages within the `foreach`\nconstruct to ensure a package is available to all of the calculations.\n\n### Alternatively using parallel apply statements\n\nThe `future.apply` package also has the ability to parallelize the\nvarious `apply` functions (`apply`, `lapply`, `sapply`, etc.).\n\nWe'll consider parallel `future_lapply` and `future_sapply`.\n\n\n\n::: {.cell hash='unit6-parallel_cache/html/unnamed-chunk-9_b2342a5b2e291047a04ef9870eac9f79'}\n\n```{.r .cell-code}\nlibrary(future.apply)\nnCores <- 2\nplan(multisession, workers = nCores)\n\ninput <- seq_len(nFolds)\ninput\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nsystem.time(\n\tres <- future_sapply(input, cvFit, folds, Y, X, future.seed = TRUE) \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  1.076   0.030  20.071 \n```\n:::\n\n```{.r .cell-code}\nsystem.time(\n\tres2 <- sapply(input, cvFit, folds, Y, X)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n 37.980   0.014  38.013 \n```\n:::\n:::\n\n\n\n\nQuestion: why are the user time (and system time) miniscule when using\n`future_sapply`?\n\nNow suppose you have 4 cores (and therefore won't have an equal number\nof tasks per core). The approach in the next scenario should work\nbetter.\n\n## Scenario 4: parallelizing over prediction methods\n\n**Scenario**: parallelizing over prediction methods or other cases where\nexecution time varies\n\nIf you need to parallelize over prediction methods or in other contexts\nin which the computation time for the different tasks varies widely, you\nwant to avoid having the parallelization tool group the tasks in\nadvance, because some cores may finish a lot more quickly than others.\nHowever, in many cases, this sort of grouping in advance (called\nprescheduling or 'static' allocation of tasks to workers) is the\ndefault. This is also the case with the future package -- the default is\nto group the tasks in advance into \"chunks\", so that each worker\nprocesses one future (one chunk), containing multiple tasks.\n\nFirst we'll set up an artificial example with four slow tasks and 12\nfast tasks and see the speed of running with the default of\nprescheduling. Whether to preschedule or not is controlled by either the\n`future.chunk.size` or `future.scheduling` arguments.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## @knitr parallel-lapply-preschedule\n\nlibrary(future.apply)\nnCores <- 4\nplan(multisession, workers = nCores)\n\n## specifically designed to be slow when have four cores and \n## and use prescheduling, because\n## the slow tasks all assigned to one worker\nn <- rep(c(1e7, 1e5, 1e5, 1e5), each = 4)\n\n\nfun <- function(i) {\n    cat(\"working on \", i, \"; \")\n    mean(lgamma(exp(rnorm(n[i]))))\n}\n\nsystem.time(fun(1)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nworking on  1 ; \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  1.411   0.012   1.424 \n```\n:::\n\n```{.r .cell-code}\nsystem.time(fun(5)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nworking on  5 ; \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  0.017   0.000   0.016 \n```\n:::\n\n```{.r .cell-code}\n## Static allocation ##\n\n## default - should do static allocation\nsystem.time(\n\tres <- future_sapply(seq_along(n), fun, future.seed = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nworking on  1 ; working on  2 ; working on  3 ; working on  4 ; working on  5 ; working on  6 ; working on  7 ; working on  8 ; working on  9 ; working on  10 ; working on  11 ; working on  12 ; working on  13 ; working on  14 ; working on  15 ; working on  16 ; \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  0.298   0.004   6.783 \n```\n:::\n\n```{.r .cell-code}\n## this is the default: 1 future (and therefore 4 tasks) per worker\nsystem.time(\n    res <- future_sapply(seq_along(n), fun, future.scheduling = 1,\n                         future.seed = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nworking on  1 ; working on  2 ; working on  3 ; working on  4 ; working on  5 ; working on  6 ; working on  7 ; working on  8 ; working on  9 ; working on  10 ; working on  11 ; working on  12 ; working on  13 ; working on  14 ; working on  15 ; working on  16 ; \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  0.298   0.009   6.709 \n```\n:::\n\n```{.r .cell-code}\n## equivalently, 4 tasks per chunk, 1 chunk (1 future) per worker\nsystem.time(\n    res <- future_sapply(seq_along(n), fun, future.chunk.size = 4,\n                         future.seed = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nworking on  1 ; working on  2 ; working on  3 ; working on  4 ; working on  5 ; working on  6 ; working on  7 ; working on  8 ; working on  9 ; working on  10 ; working on  11 ; working on  12 ; working on  13 ; working on  14 ; working on  15 ; working on  16 ; \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  0.241   0.008   6.639 \n```\n:::\n:::\n\n\n\nAnd here we prevent prescheduling. I find the `future.chunk.size`\nargument easier to understand than the `future.scheduling` argument.\n`future.chunk.size` says how many tasks to group together. So setting\nequal to 1 means no grouping and therefore not using static allocation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Dynamic allocation ## \n\n## 1 task per chunk, 4 chunks (4 futures) per worker \nsystem.time(\n    res <- future_sapply(seq_along(n), fun, future.chunk.size = 1,\n                         future.seed = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nworking on  1 ; working on  2 ; working on  3 ; working on  4 ; working on  5 ; working on  6 ; working on  7 ; working on  8 ; working on  9 ; working on  10 ; working on  11 ; working on  12 ; working on  13 ; working on  14 ; working on  15 ; working on  16 ; \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  0.288   0.009   2.483 \n```\n:::\n\n```{.r .cell-code}\n## or, equivalently, we could specify future.scheduling = 4\n```\n:::\n\n\n\n\n## Scenario 5: 10-fold CV across multiple methods with many more than 10 cores\n\n**Scenario**: You are running an ensemble prediction method such as\nSuperLearner or Bayesian model averaging on 10 cross-validation folds,\nwith many statistical/machine learning methods.\n\nHere you want to take advantage of all the cores you have available, so\nyou can't just parallelize over folds.\n\nFirst we'll discuss how to deal with the nestedness of the problem and\nthen we'll talk about how to make use of many cores across multiple\nnodes to parallelize over a large number of tasks.\n\n### Scenario 5A: nested parallelization\n\nOne can always flatten the looping, either in a for loop or in similar\nways when using apply-style statements.\n\n```\n## original code: multiple loops \nfor(fold in 1:n) { \n  for(method in 1:M) { \n     ### code here \n  }\n}\n## revised code: flatten the loops \noutput <- foreach(idx = 1:(n*M)) %dopar% { \n   fold <- idx %/% M + 1 \n   method <- idx %% M + 1 \n   ### code here \n}\n```\n\nAlternatively, `foreach` supports nested parallelization as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput <- foreach(fold = 1:n) %:% \n  foreach(method = 1:M) %dopar% { \n     ## code here \n}\n```\n:::\n\n\n\nThe `%:%` basically causes the nesting to be flattened, with `n*M` total\ntasks run in parallel.\n\nOne can also use nested futures and the future package will just take\ncare of parallelizing across all the individual tasks. I won't go into\nthat here, but there is information in the tutorial.\n\n### Scenario 5B: Parallelizing across multiple nodes\n\nIf you have access to multiple machines networked together, including a\nLinux cluster, you can use the tools in the future package across\nmultiple nodes (either in a nested parallelization situation with many\ntotal tasks or just when you have lots of unnested tasks to parallelize\nover). Here we'll just illustrate how to use multiple nodes, but if you\nhad a nested parallelization case you can combine the ideas just above\nwith the use of multiple nodes.\n\nSimply start R as you usually would.\n\nHere we'll use `foreach` with the future-based `doFuture` backend.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(doFuture)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: foreach\n```\n:::\n\n```{.r .cell-code}\nlibrary(doRNG)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: rngtools\n```\n:::\n\n```{.r .cell-code}\n## Specify the machines you have access to and\n##    number of cores to use on each:\nmachines = c(rep(\"radagast.berkeley.edu\", 1),\n    rep(\"gandalf.berkeley.edu\", 1),\n    rep(\"arwen.berkeley.edu\", 2))\n\n## On the SCF, Savio and other clusters using the SLURM scheduler,\n## you can figure out the machine names and set up the input to\n## the 'workers' argument of 'plan' like this:\n## machines <- system('srun hostname', intern = TRUE)\n\nplan(cluster, workers = machines)\n\nregisterDoFuture()\n\nfun = function(i, n = 1e6)\n  out = mean(rnorm(n))\n\nnTasks <- 120\n\nprint(system.time(out <- foreach(i = 1:nTasks) %dorng% {\n\toutSub <- fun(i)\n\toutSub # this will become part of the out object\n}))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  0.605   0.023   5.044 \n```\n:::\n:::\n\n\n\nTo use `future_lapply`, set up the plan in similar fashion to above. You\ncan then do:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.time(\n\tres <- future_sapply(input, cvFit, folds, Y, X) \n)\n\n## And just to check we are actually using the various machines:\nfuture_sapply(seq_along(workers), function(i) Sys.getenv('HOST'))\n```\n:::\n\n\n\n\n## Scenario 6: Stratified analysis on a very large dataset\n\n**Scenario**: You are doing stratified analysis on a very large dataset\nand want to avoid unnecessary copies.\n\nIn many of R's parallelization tools, if you try to parallelize this\ncase on a single node, you end up making copies of the original dataset,\nwhich both takes up time and eats up memory.\n\nHere when we use the `multisession` plan, we make copies for each\nworker. And it's even worse if we force each task to be sent separately\nso that there is one copy per task.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_analysis <- function(i) {\n    return(mean(x))\n}\nx <- rnorm(5e7)  # our big \"dataset\"\n\noptions(future.globals.maxSize = 1e9)\n\nplan(multisession, workers = 4) # new processes - copying!\nsystem.time(tmp <- future_sapply(1:100, do_analysis))  # 9 sec.\n\n## even worse if we dynamically allocate the tasks\nsystem.time(tmp <- future_sapply(1:100, do_analysis,\n                                 future.chunk.size = 1)) # 23 sec.\n```\n:::\n\n\n\nHowever, if you are working on a single machine (i.e., with shared\nmemory) you can avoid this by using parallelization strategies that fork\nthe original R process (i.e., make a copy of the process) and use the\nbig data objects in the global environment (yes, this violates the usual\nprogramming best practices of not using global variables). The\n`multicore` plan (not available on Windows) allows you to do this.\n\nThis creates R worker processes with the same state as the original R\nprocess. Interestingly, this means that global variables in the forked\nworker processes are just references to the objects in memory in the\noriginal R process. So the additional processes do not use additional\nmemory for those objects (despite what is shown in `top`) and there is no\ntime involved in making copies. However, if you modify objects in the\nworker processes then copies are made.\n\nSo here we avoid copying the original dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplan(multicore, workers = 4)  # forks (where supported, not Windows); no copying!\nsystem.time(tmp <- future_sapply(1:100, do_analysis))  # 6.5 sec.\n```\n:::\n\n\n\n\nAnd here is code you can run to demonstrate that when using multicore,\nno copies are made.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(3.1, 2.5, 7.3)\nlobstr::obj_addr(x)\n\nfuture_sapply(1:2, function(i) {\n    ## First, use the global 'x' just in case anything funny going on\n    ## before object is used.\n    y <- x[1]   \n    print(lobstr::obj_addr(x))\n})\n```\n:::\n\n\n\n\n## Scenario 7: Simulation study with n=1000 replicates: parallel random number generation\n\nWe won't cover this in class and you don't need to worry about this at\nthe moment. Instead, I will mention the issue in the simulation unit\nwhen we talk about random number generation.\n\nIn Section 5, we set the random number seed to different values for\nrandom sample. One danger in setting the seed like that is that the\nrandom numbers in the different samples could overlap somewhat. This is\nprobably somewhat unlikely if you are not generating a huge number of\nrandom numbers, but it's unclear how safe it is.\n\nThe key thing when thinking about random numbers in a parallel context\nis that you want to avoid having the same 'random' numbers occur on\nmultiple processes. On a computer, random numbers are not actually\nrandom but are generated as a sequence of pseudo-random numbers designed\nto mimic true random numbers. The sequence is finite (but very long) and\neventually repeats itself. When one sets a seed, one is choosing a\nposition in that sequence to start from. Subsequent random numbers are\nbased on that subsequence. All random numbers can be generated from one\nor more random uniform numbers, so we can just think about a sequence of\nvalues between 0 and 1.\n\n**Scenario**: You are running a simulation study with n=1000 replicates.\n\nEach replicate involves fitting two statistical/machine learning\nmethods.\n\nHere, unless you really have access to multiple hundreds of cores, you\nmight as well just parallelize across replicates.\n\nHowever, you need to think about random number generation. If you have\noverlap in the random numbers the replications may not be fully\nindependent.\n\nIn R, the `rlecuyer` package deals with this. The L'Ecuyer algorithm has\na period of $2^{191}$, which it divides into subsequences of length\n$2^{127}$.\n\nHere's how you initialize independent sequences on different processes\nwhen using the `future_lapply`. All you need to do is set the argument\n`future.seed`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(future.apply)\n\nfun <- function(i) {\n    mean(lgamma(exp(rnorm(100))))\n}\n\nnCores <- 4\nplan(multisession, workers = nCores)\n\nnSims <- 50\nres <- future_sapply(seq_len(nSims), fun, future.seed = 1)\n```\n:::\n\n\n\n\nDealing with parallel random number generation when using `foreach` or\n`future()` is a bit more involved. See the tutorial.\n\n# 6. Additional details and topics (optional)\n\n## Setting the number of threads (cores used) in threaded code (including parallel linear algebra in R)\n\nIn general, threaded code will detect the number of cores available on a\nmachine and make use of them. However, you can also explicitly control\nthe number of threads available to a process.\n\nFor most threaded code (that based on the openMP protocol), the number\nof threads can be set by setting the OMP_NUM_THREADS environment\nvariable (VECLIB_MAXIMUM_THREADS on a Mac). E.g., to set it for four\nthreads in the bash shell:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nexport OMP_NUM_THREADS=4\n```\n:::\n\n\n\nDo this before starting your R or Python session or before running your\ncompiled executable.\n\nAlternatively, you can set OMP_NUM_THREADS as you invoke your job, e.g.,\nhere with R:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nOMP_NUM_THREADS=4 R CMD BATCH --no-save job.R job.out\n```\n:::\n\n\n\n\n## Important warnings about use of threaded BLAS\n\n### Speed and threaded BLAS\n\nIn many cases, using multiple threads for linear algebra operations will\noutperform using a single thread, but there is no guarantee that this\nwill be the case, in particular for operations with small matrices and\nvectors. You can compare speeds by setting OMP_NUM_THREADS to different\nvalues. In cases where threaded linear algebra is slower than\nunthreaded, you would want to set OMP_NUM_THREADS to 1.\n\nMore generally, if you are using the parallel tools in Section 4 to\nsimultaneously carry out many independent calculations (tasks), it is\nlikely to be more effective to use the fixed number of cores available\non your machine so as to split up the tasks, one per core, without\ntaking advantage of the threaded BLAS (i.e., restricting each process to\na single thread).\n\n### Conflicts between openBLAS and various R functionality\n\nIn the past, I've seen various issues arising when using threaded linear\nalgebra. In some cases when the parallelization uses forking, I have\nseen cases where R hangs and doesn't finish the linear algebra\ncalculation.\n\nI've also seen a conflict between threaded linear algebra and R\nprofiling (recall the discussion of profiling in the efficient R tutorial).\n\nSome solutions are to set OMP_NUM_THREADS to 1 to prevent the BLAS from\ndoing threaded calculations or to use parallelization approaches that\navoid forking.\n\n# 7. Using Dask in Python\n\nDask has similar functionality to R's future package for parallelizing\nacross one or more machines/nodes. In addition, it has the important\nfeature of handling distributed datasets - datasets that are split into\nchunks/shareds and operated on in parallel. We'll see more about\ndistributed datasets in Unit 7 but here we'll introduce the basic\nfunctionality.\n\n## Scheduler\n\nThe scheduler is the analogue of plan in the R future package. For\nexample to parallelize across multiple cores via separate Python\nprocesses, we'd do this.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport dask.multiprocessing\ndask.config.set(scheduler='processes', num_workers = 4)  \n```\n:::\n\n\n\nThis table shows the different types of schedulers.\n\n|      Type     |               Description              |  Multi-node |  Copies of objects made? |\n|  -------------| ---------------------------------------| ------------| -------------------------|\n|   synchronous |        not in parallel (serial)        |      no     |            no |\n|    threaded   |  threads within current Python session |      no     |            no |\n|    processes  |       background Python sessions       |      no     |            yes |\n|   distributed |  Python sessions across multiple nodes |     yes     |            yes |\n\n\nComments:\n\n1.  Note that because of Python's Global Interpreter Lock (GIL) (which\n    prevents threading of Python code), many computations done in pure\n    Python code won't be parallelized using the 'threaded' scheduler;\n    however computations on numeric data in numpy arrays, Pandas\n    dataframes and other C/C++/Cython-based code will parallelize.\n2.  It's fine to use the distributed scheduler on one machine, such as\n    your laptop. According to the Dask documentation, it has advantages\n    over multiprocessing, including the diagnostic dashboard (see the\n    tutorial) and better handling of when copies need to be made. In\n    addition, one needs to use it for parallel map operations (see next\n    section).\n\n## Parallel map\n\nThis is the analog of apply/lapply/sapply type functions in R. As we've discussed\nthose are examples of map operations. \n\nTo do a parallel map, we need to use the distributed scheduler, but it's\nfine to do that with multiple cores on a single machine (such as a\nlaptop).\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom dask.distributed import Client, LocalCluster\ncluster = LocalCluster(n_workers = 4)\nc = Client(cluster)\n\n# code in calc_mean.py will calculate the mean of many random numbers\nfrom calc_mean import *    \n\np = 20\nn = 100000000  # must be of type integer\n# set up and execute the parallel map\ninputs = [(i, n) for i in range(p)]\n# execute the function across the array of input values\nfuture = c.map(calc_mean_vargs, inputs)\nresults = c.gather(future)\nresults\n```\n:::\n\n\n\nThe map operation appears to cache results. If you rerun the above with\nthe same inputs, you get the same result back essentially\ninstantaneously. HOWEVER, that means that if there is randomness in the\nresults of your function for a given input, Dask will just continue to\nreturn the original output.\n\n## Futures / delayed evaluation\n\nThe analog of using `future()` in R to delay/parallelize tasks is shown\nhere. We use `delayed` to indicate the tasks and then to actually\nevaluate the code we need to run `compute`. This is another example of\nlazy evaluation.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# code in calc_mean.py will calculate the mean of many random numbers\nfrom calc_mean import *    \n\nimport dask.multiprocessing\ndask.config.set(scheduler='processes', num_workers = 4)  \n\nfutures = []\np = 10\nn = 100000000\nfor i in range(p):\n    futures.append(dask.delayed(calc_mean)(i, n))  # add lazy task\n\nfutures\nresults = dask.compute(futures)  # compute all in parallel\n```\n:::\n\n\n\n## Final notes\n\nI've only hit a few highlights here, in particular analogous\nfunctionality to the future package, but there's lots more details in\nthe tutorial.\n\nSome additional comments regarding the principles of parallelization\nalready discussed:\n\n1.  You can set up nested parallelizations easily using `delayed`.\n2.  Dask generally uses dynamic allocation (no prescheduling), which can\n    be a drawback on some cases. You may want to manually break up\n    computations into chunks in some cases.\n3.  You generally don't want to call `compute` separately for multiple\n    steps of a computation, as Dask will generally avoid keeping things\n    in memory. Instead, write out the code for all the steps and then\n    call `compute` once.\n4.  Except with the `threads` scheduler, copies are made of all objects\n    passed to the workers. However if you use the `distributed`\n    scheduler, you can arrange things so one copy is sent for each\n    worker (rather than for each task).\n5.  With a bit more work than in the future package in R, you can set up\n    safe parallel random number generation.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}