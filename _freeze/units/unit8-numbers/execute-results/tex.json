{
  "hash": "61f30abf7c80d2dad148f3f9f507c0f3",
  "result": {
    "markdown": "---\ntitle: \"Numbers on a computer\"\nauthor: \"Chris Paciorek\"\ndate: \"2022-10-13\"\nformat:\n  pdf:\n    documentclass: article\n    margin-left: 30mm\n    margin-right: 30mm\n    toc: true\n  html:\n    theme: cosmo\n    css: ../styles.css\n    toc: true\n    code-copy: true\n    code-block-background: true\nexecute:\n  freeze: auto\n---\n\n\n\n[PDF](./unit8-numbers.pdf){.btn .btn-primary}\n\n\nReferences:\n\n-   Gentle, Computational Statistics, Chapter 2.\n-   [http://www.lahey.com/float.htm](http://www.lahey.com/float.htm)\n-   And for more gory detail, see Monahan, Chapter 2.\n\nA quick note that, as we've already seen, R's version of scientific\nnotation is `XeY`, which means $X\\cdot10^{Y}$.\n\nA second note is that the concepts developed here apply outside of R,\nbut we'll illustrate the principles of computer numbers using R. R makes\nuse of the *double* and *int* types in C for the underlying\nrepresentation of R's numbers in C variables, so what we'll really be\nseeing is how such types behave in C on most modern machines. The behavior\nof real-valued numbers in Python is essentially the same, but\nPython handles the integer type differently.\n\nVideos (optional): \n\nThere are various videos from 2020 in the bCourses Media Gallery that you\ncan use for reference if you want to. \n\n  - Video 1. Bits, bytes, and integers\n  - Video 2. Double precision numbers: intro\n  - Video 3. Double precision numbers: details\n  - Video 4. Overflow and integers vs. doubles\n\n# 1. Basic representations\n\nEverything in computer memory or on disk is stored in terms of bits. A\n*bit* is essentially a switch than can be either on or off. Thus\neverything is encoded as numbers in base 2, i.e., 0s and 1s. 8 bits make\nup a *byte*. For information stored as plain text (ASCII), each byte is\nused to encode a single character (as previously discussed, actually only 7 of the 8 bits are\nactually used, hence there are $2^{7}=128$ ASCII characters). One way to\nrepresent a byte is to write it in hexadecimal, rather than as 8 0/1\nbits. Since there are $2^{8}=256$ possible values in a byte, we can\nrepresent it more compactly as 2 base-16 numbers, such as \"3e\" or \"a0\"\nor \"ba\". A file format is nothing more than a way of interpreting the\nbytes in a file.\n\nHere we'll use the *bits* function from *pryr* to look\nat the underlying binary representation. Note that 'b' is encoded as 1\nmore than 'a', and similarly for '0', '1', and '2'.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pryr)\nbits('a')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01100001\"\n```\n:::\n\n```{.r .cell-code}\nbits('b')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01100010\"\n```\n:::\n\n```{.r .cell-code}\nbits('0')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00110000\"\n```\n:::\n\n```{.r .cell-code}\nbits('1')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00110001\"\n```\n:::\n\n```{.r .cell-code}\nbits('2')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00110010\"\n```\n:::\n\n```{.r .cell-code}\nbits('@')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000000\"\n```\n:::\n:::\n\n\n\n\nWe can think about how we'd store an integer in terms of bytes. With two\nbytes (16 bits), we could encode any value from $0,\\ldots,2^{16}-1=65535$. This is\nan *unsigned* integer representation. To store negative numbers as well,\nwe can use one bit for the sign, giving us the ability to encode\n-32767 - 32767 ($\\pm2^{15}-1$).\n\nR actually uses 4 bytes per integer, so it can encode -2147483647 -\n2147483647 ($\\pm2^{31}-1$). Note that in general, rather than be stored\nsimply as the sign and then a number in base 2, integers (at least the\nnegative ones) are actually stored in different binary encoding to\nfacilitate arithmetic. Here we use the \"L\" to force R to store the\nnumber as an integer. More on that later in the Unit.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pryr)\nbits(0L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbytes(0L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00 00 00 00\"\n```\n:::\n\n```{.r .cell-code}\nbits(1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00000000 00000000 00000000 00000001\"\n```\n:::\n\n```{.r .cell-code}\nbytes(1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00 00 00 01\"\n```\n:::\n\n```{.r .cell-code}\nbits(2L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00000000 00000000 00000000 00000010\"\n```\n:::\n\n```{.r .cell-code}\nbytes(2L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00 00 00 02\"\n```\n:::\n\n```{.r .cell-code}\nbits(-1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"11111111 11111111 11111111 11111111\"\n```\n:::\n\n```{.r .cell-code}\nbytes(-1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"FF FF FF FF\"\n```\n:::\n:::\n\n\n\n\nFinally note that the set of computer integers is not closed under\narithmetic, with R reporting an overflow (i.e., a result that is too\nlarge to be stored as an integer using 4 bytes):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- as.integer(3423333)  # 3423333L\na * a\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in a * a: NAs produced by integer overflow\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n\n\nReal numbers (or *floating points*) use a minimum of 4 bytes, for single\nprecision floating points. (GPU calculations often use single precision.)\nIn general (including in R) 8 bytes are used to represent real\nnumbers on a computer and these are called *double precision floating\npoints* or *doubles*. Let's see some examples in R of how much space\ndifferent types of variables take up.\n\nLet's see how this plays out in terms of memory use in R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoubleVec <- rnorm(100000)\nintVec <- 1:100000\nobject.size(doubleVec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n800048 bytes\n```\n:::\n\n```{.r .cell-code}\nobject.size(intVec) # so how many bytes per integer in R?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n400048 bytes\n```\n:::\n:::\n\n\n\n\nWe can easily calculate the number of megabytes (MB) a vector of\nfloating points (in double precision) will use as the number of elements\ntimes 8 (bytes/double) divided by $10^{6}$ to convert from bytes to\nmegabytes. (In some cases when considering computer memory, a megabyte\nis $1,048,576=2^{20}=1024^{2}$ bytes (this is formally called a\n*mebibyte*) so slightly different than $10^{6}$ -- see [here for more\ndetails](https://en.wikipedia.org/wiki/Megabyte)). Finally, R has a\nspecial object that tells us about the characteristics of computer\nnumbers on the machine that R is running on called *.Machine.* For\nexample, `.Machine\\$integer.max` is $2147483647=2^{31}-1$, which\nconfirms how many bytes R is using for each integer (and that R is using\na bit for the sign of the integer). Since we have both negative and\npositive numbers, we have $2\\cdot2^{31}=2^{32}=(2^{8})^{4}$, i.e., 4\nbytes, with each byte having 8 bits.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbits(.Machine$integer.max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01111111 11111111 11111111 11111111\"\n```\n:::\n\n```{.r .cell-code}\nbits(-.Machine$integer.max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"10000000 00000000 00000000 00000001\"\n```\n:::\n\n```{.r .cell-code}\nbits(-1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"11111111 11111111 11111111 11111111\"\n```\n:::\n:::\n\n\n\n\n# 2. Floating point basics\n\n## Representing real numbers\n\nReals (also called floating points) are stored on the computer as an\napproximation, albeit a very precise approximation. As an example, if we\nrepresent the distance from the earth to the sun using a double, the\nerror is around a millimeter. However, we need to be very careful if\nwe're trying to do a calculation that produces a very small (or very\nlarge number) and particularly when we want to see if numbers are equal\nto each other.\n\nIf you run the code here, the results may surprise you.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n0.3 - 0.2 == 0.1\n0.3\n0.2\n0.1 # Hmmm...\n\n0.75 - 0.5 == 0.25\n0.6 - 0.4 == 0.2\n## any ideas what is different about those two comparisons?\n```\n:::\n\n\n\nNext, let's consider the number of digits of accuracy\nwe have for a variety of numbers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 0.3\nb <- 0.2\nformatC(b, 20, format = 'f')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.20000000000000001110\"\n```\n:::\n\n```{.r .cell-code}\nformatC(a, 20, format = 'f')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.29999999999999998890\"\n```\n:::\n\n```{.r .cell-code}\nformatC(a - b, 20, format = 'f')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.09999999999999997780\"\n```\n:::\n\n```{.r .cell-code}\nformatC(0.1, 20, format = 'f')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.10000000000000000555\"\n```\n:::\n\n```{.r .cell-code}\nformatC(1/3, 20, format = 'f')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.33333333333333331483\"\n```\n:::\n:::\n\n\n\nSo empirically, it looks like we're accurate up to the 16th decimal place\n\nBut actually, the key is the number of digits, not decimal places.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformatC(18.2, 20, format = 'f')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"18.19999999999999928946\"\n```\n:::\n\n```{.r .cell-code}\nformatC(0.75, 20, format = 'f')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.75000000000000000000\"\n```\n:::\n\n```{.r .cell-code}\nformatC(0.50, 20, format = 'f')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.50000000000000000000\"\n```\n:::\n\n```{.r .cell-code}\n## alternative to formatC:\nsprintf(\"%0.20f\", a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.29999999999999998890\"\n```\n:::\n:::\n\n\n\nFor our future explorations, let's define a wrapper function for convenience:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndg <- function(x, digits = 20) formatC(x, digits, format = 'f')\n```\n:::\n\n\n\nNotice that we can represent the result accurately only up to 16\nsignificant digits. This suggests no need to show more than 16\nsignificant digits and no need to print out any more when writing to a\nfile (except that if the number is bigger than $10^{16}$ then we need\nextra digits to correctly show the magnitude of the number if not using\nscientific notation). And of course, often we don't need anywhere near\nthat many.\n\n*Machine epsilon* is the term used for indicating the\n(relative) accuracy of real numbers and it is defined as the smallest\nfloat, $x$, such that $1+x\\ne1$:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndg(1e-16 + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.00000000000000000000\"\n```\n:::\n\n```{.r .cell-code}\ndg(1e-15 + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.00000000000000111022\"\n```\n:::\n\n```{.r .cell-code}\ndg(2e-16 + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.00000000000000022204\"\n```\n:::\n\n```{.r .cell-code}\ndg(.Machine$double.eps)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.00000000000000022204\"\n```\n:::\n\n```{.r .cell-code}\ndg(.Machine$double.eps + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.00000000000000022204\"\n```\n:::\n:::\n\n\n\n#### Floating point representation\n\n*Floating point* refers to the decimal point (or *radix* point since we'll\nbe working with base 2 and *decimal* relates to 10). Consider Avogadro's\nnumber in terms of scientific notation: $+6.023\\times10^{23}$. As a\nbaseline for what is about to follow note that we can express a decimal\nnumber in the following expansion\n\n\n$$6.03=6\\times10^{0}+0\\times10^{-1}+3\\times10^{-2}$$ A real number on a\ncomputer is stored in what is basically scientific notation:\n\n\n$$\\pm d_{0}.d_{1}d_{2}\\ldots d_{p}\\times b^{e}\\label{eq:floatRep}$$\n\n\nwhere $b$ is the base, $e$ is an integer and $d_{i}\\in\\{0,\\ldots,b-1\\}$.\n$e$ is called the *exponent* and $d=d_{1}d_{2}\\ldots d_{p}$ is called the *mantissa*.\n\nLet's consider the choices that the computer pioneers needed to make\nin using this system to represent numbers on a computer using base 2.\nFirst, we need to choose the number of bits to represent $e$ so that we\ncan represent sufficiently large and small numbers. Second we need to\nchoose the number of bits, $p$, to allocate to \n$d=d_{1}d_{2}\\ldots d_{p}$, which determines the accuracy of any\ncomputer representation of a real.\n\nThe great thing about floating points\nis that we can represent numbers that range from incredibly small to\nvery large while maintaining good precision. The floating point *floats*\nto adjust to the size of the number. Suppose we had only three digits to\nuse and were in base 10. In floating point notation we can express\n$0.12\\times0.12=0.0144$ as\n$(1.20\\times10^{-1})\\times(1.20\\times10^{-1})=1.44\\times10^{-2}$, but if\nwe had fixed the decimal point, we'd have $0.120\\times0.120=0.014$ and\nwe'd have lost a digit of accuracy. (Furthermore, we wouldn't be able\nto represent numbers bigger than $0.99$.\n\nMore specifically, the actual storage of a number on a computer these\ndays is generally as a double in the form:\n\n\n$$(-1)^{S}\\times1.d\\times2^{e-1023}=(-1)^{S}\\times1.d_{1}d_{2}\\ldots d_{52}\\times2^{e-1023}$$\n\n\nwhere the computer uses base 2, $b=2$, (so $d_{i}\\in\\{0,1\\}$) because\nbase-2 arithmetic is faster than base-10 arithmetic. The leading 1\nnormalizes the number; i.e., ensures there is a unique representation\nfor a given computer number. This avoids representing any number in\nmultiple ways, e.g., either\n$1=1.0\\times2^{0}=0.1\\times2^{1}=0.01\\times2^{2}$. For a double, we have\n8 bytes=64 bits. Consider our representation as ($S,d,e$) where $S$ is\nthe sign. The leading 1 is the *hidden bit* and doesn't need to be\nstored because it is always present. In general $e$ is\nrepresented using 11 bits ($2^{11}=2048$), and the subtraction takes the\nplace of having a sign bit for the exponent. (Note that in our\ndiscussion we'll just think of $e$ in terms of its base 10\nrepresentation, although it is of course represented in base 2.) This\nleaves $p=52 = 64-1-11$ bits for $d$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbits(2^(-1)) # 1/2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00111111 11100000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^0)  # 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^1)  # 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^1 + 2^0)  # 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^2)  # 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbits(-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n:::\n\n**Question**: Given a fixed number of bits for a number, what is the\ntradeoff between using bits for the $d$ part vs. bits for the $e$ part?\n\nLet's consider what can be represented exactly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndg(.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.10000000000000000555\"\n```\n:::\n\n```{.r .cell-code}\ndg(.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.50000000000000000000\"\n```\n:::\n\n```{.r .cell-code}\ndg(.25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.25000000000000000000\"\n```\n:::\n\n```{.r .cell-code}\ndg(.26)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.26000000000000000888\"\n```\n:::\n\n```{.r .cell-code}\ndg(1/32)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.03125000000000000000\"\n```\n:::\n\n```{.r .cell-code}\ndg(1/33)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.03030303030303030387\"\n```\n:::\n:::\n\nSo why is 0.5 stored exactly and 0.1 not stored exactly? By analogy,\nconsider the difficulty with representing 1/3 in base 10.\n\n## Overflow and underflow\n\nThe largest and smallest numbers we can represent are $2^{e_{\\max}}$ and\n$2^{e_{\\min}}$ where $e_{\\max}$ and $e_{\\min}$ are the smallest and\nlargest possible values of the exponent. Let's consider the exponent and\nwhat we can infer about the range of possible numbers. With 11 bits for\n$e$, we can represent $\\pm2^{10}=\\pm1024$ different exponent values (see\n*.Machine\\$double.max.exp*) (why is *.Machine\\$double.min.exp* only\n-1022? ). So the largest number we could represent is $2^{1024}$. What\nis this in base 10?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog10(2^1024) # whoops ... we've actually just barely overflowed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf\n```\n:::\n\n```{.r .cell-code}\nlog10(2^1023)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 307.9537\n```\n:::\n\n```{.r .cell-code}\n.Machine$double.xmax\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.797693e+308\n```\n:::\n\n```{.r .cell-code}\n.Machine$double.xmin\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.225074e-308\n```\n:::\n:::\n\nWe could have been smarter about that calculation:\n$\\log_{10}2^{1024}=\\log_{2}2^{1024}/\\log_{2}10=1024/3.32\\approx308$. The\nresult is analogous for the smallest number, so we have that floating\npoints can range between $1\\times10^{-308}$ and $1\\times10^{308}$. Take\na look at *.Machine\\$double.xmax* and *.Machine.double.xmin*. Producing\nsomething larger or smaller in magnitude than these values is called\noverflow and underflow respectively. When we overflow, R gives back an\nInf or -Inf (and in other cases we might get an error message). When we\nunderflow, we get back 0, which in particular can be a problem if we try\nto divide by the value.\n\n## Integers or floats?\n\nValues stored as integers should overflow if they exceed\n*.Machine\\$integer.max*.\n\nShould $2^{45}$ overflow?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2^45\nz <- 25\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nas.integer(x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion to integer range\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nas.integer(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n\n```{.r .cell-code}\n1e308\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1e+308\n```\n:::\n\n```{.r .cell-code}\n1e309\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf\n```\n:::\n\n```{.r .cell-code}\n2^31\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2147483648\n```\n:::\n\n```{.r .cell-code}\nx <- 2147483647L\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2147483647\n```\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nx <- 2147483648L\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\nIn R, numbers are generally stored as doubles. We've basically already\nseen why - consider the maximum integer when using 4 bytes and the\nmaximum floating point value. Representing integers as floats isn't\ngenerally a problem, in part because integers will be stored exactly in\nbase two provided the absolute value is less than $2^{53}$.\n\n> *Challenge*: Why $2^{53}$? Write out what integers can be stored exactly in our base 2 representation of floating point numbers.\n\nHowever, you can force storage as integers in a few ways: values\ngenerated based on *seq()*, based on the : operator, specified with an\n\"L\", or explicitly coerced:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3; typeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nx <- as.integer(3); typeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nx <- 3L; typeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nx <- 3:5; typeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n## Precision\n\nConsider our representation as (*S, d, e*) where we have $p=52$ bits for\n$d$. Since we have $2^{52}\\approx0.5\\times10^{16}$, we can represent\nabout that many discrete values, which means we can accurately represent\nabout 16 digits (in base 10). The result is that floats on a computer\nare actually discrete (we have a finite number of bits), and if we get a\nnumber that is in one of the gaps (there are uncountably many reals),\nit's approximated by the nearest discrete value. The accuracy of our\nrepresentation is to within 1/2 of the gap between the two discrete\nvalues bracketing the true number. Let's consider the implications for\naccuracy in working with large and small numbers. By changing $e$ we can\nchange the magnitude of a number. So regardless of whether we have a\nvery large or small number, we have about 16 digits of accuracy, since\nthe absolute spacing depends on what value is represented by the least\nsignificant digit (the *ulp*, or *unit in the last place*) in $d$, i.e.,\nthe $p=52$nd one, or in terms of base 10, the 16th digit. Let's explore\nthis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# large vs. small numbers\ndg(.1234123412341234)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.12341234123412339607\"\n```\n:::\n\n```{.r .cell-code}\ndg(1234.1234123412341234) # not accurate to 16 decimal places \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1234.12341234123414324131\"\n```\n:::\n\n```{.r .cell-code}\ndg(123412341234.123412341234) # only accurate to 4 places \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"123412341234.12341308593750000000\"\n```\n:::\n\n```{.r .cell-code}\ndg(1234123412341234.123412341234) # no places! \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1234123412341234.00000000000000000000\"\n```\n:::\n\n```{.r .cell-code}\ndg(12341234123412341234) # fewer than no places! \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"12341234123412340736.00000000000000000000\"\n```\n:::\n:::\n\nWe can see the implications of this in the context of calculations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndg(1234567812345678 - 1234567812345677)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1.00000000000000000000\"\n```\n:::\n\n```{.r .cell-code}\ndg(12345678123456788888 - 12345678123456788887)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.00000000000000000000\"\n```\n:::\n\n```{.r .cell-code}\ndg(12345678123456780000 - 12345678123456770000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"10240.00000000000000000000\"\n```\n:::\n:::\n\nThe spacing of possible computer numbers that have a magnitude of about\n1 leads us to another definition of *machine epsilon* (an alternative,\nbut essentially equivalent definition to that given previously in this\nUnit). Machine epsilon tells us also about the relative spacing of\nnumbers. First let's consider numbers of magnitude one. The difference\nbetween $1=1.00...00\\times2^{0}$ and $1.000...01\\times2^{0}$ is\n$\\epsilon=1\\times2^{-52}\\approx2.2\\times10^{-16}$. Machine epsilon gives\nthe *absolute spacing* for numbers near 1 and the *relative spacing* for\nnumbers with a different order of magnitude and therefore a different\nabsolute magnitude of the error in representing a real. The relative\nspacing at $x$ is $$\\frac{(1+\\epsilon)x-x}{x}=\\epsilon$$ since the next\nlargest number from $x$ is given by $(1+\\epsilon)x$.\n\nSuppose $x=1\\times10^{6}$. Then the absolute error in representing a\nnumber of this magnitude is $x\\epsilon\\approx2\\times10^{-10}$. (Actually\nthe error would be one-half of the spacing, but that's a minor\ndistinction.) We can see by looking at the numbers in decimal form,\nwhere we are accurate to the order $10^{-10}$ but not $10^{-11}$. This\nis equivalent to our discussion that we have only 16 digits of accuracy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndg(1000000.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1000000.09999999997671693563\"\n```\n:::\n:::\n\nLet's see what arithmetic we can do exactly with integer-valued numbers stored as\ndoubles and how that relates to the absolute spacing of numbers we've\njust seen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndgi <- function(x) formatC(x, digits = 20, format = 'g')\n\ndgi(2^52)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"     4503599627370496\"\n```\n:::\n\n```{.r .cell-code}\ndgi(2^52+1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"     4503599627370497\"\n```\n:::\n\n```{.r .cell-code}\ndgi(2^53)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"     9007199254740992\"\n```\n:::\n\n```{.r .cell-code}\ndgi(2^53+1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"     9007199254740992\"\n```\n:::\n\n```{.r .cell-code}\ndgi(2^53+2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"     9007199254740994\"\n```\n:::\n\n```{.r .cell-code}\ndgi(2^54)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"    18014398509481984\"\n```\n:::\n\n```{.r .cell-code}\ndgi(2^54+2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"    18014398509481984\"\n```\n:::\n\n```{.r .cell-code}\ndgi(2^54+4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"    18014398509481988\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^53)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000011 01000000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^53+1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000011 01000000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^53+2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000011 01000000 00000000 00000000 00000000 00000000 00000000 00000001\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^54)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000011 01010000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^54+2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000011 01010000 00000000 00000000 00000000 00000000 00000000 00000000\"\n```\n:::\n\n```{.r .cell-code}\nbits(2^54+4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01000011 01010000 00000000 00000000 00000000 00000000 00000000 00000001\"\n```\n:::\n:::\n\nThe absolute spacing is $x\\epsilon$, so we have spacings of\n$2^{52}\\times2^{-52}=1$, $2^{53}\\times2^{-52}=2$,\n$2^{54}\\times2^{-52}=4$ for numbers of magnitude $2^{52}$, $2^{53}$, and\n$2^{54}$, respectively.\n\nWith a bit more work (e.g., using Mathematica), one can demonstrate that\ndoubles in R in general are represented as the nearest number that can\nstored with the 64-bit structure we have discussed and that the spacing\nis as we have discussed. The results below show the spacing that\nresults, in base 10, for numbers around 0.1. The numbers R reports are\nspaced in increments of individual bits in the base 2 representation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndg(0.1234567812345678)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.12345678123456779729\"\n```\n:::\n\n```{.r .cell-code}\ndg(0.12345678123456781)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.12345678123456781117\"\n```\n:::\n\n```{.r .cell-code}\ndg(0.12345678123456782)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.12345678123456782505\"\n```\n:::\n\n```{.r .cell-code}\ndg(0.12345678123456783)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.12345678123456782505\"\n```\n:::\n\n```{.r .cell-code}\ndg(0.12345678123456784)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.12345678123456783892\"\n```\n:::\n\n```{.r .cell-code}\nbits(0.1234567812345678)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00111111 10111111 10011010 11011101 00010101 11011111 00110100 10000110\"\n```\n:::\n\n```{.r .cell-code}\nbits(0.12345678123456781)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00111111 10111111 10011010 11011101 00010101 11011111 00110100 10000111\"\n```\n:::\n\n```{.r .cell-code}\nbits(0.12345678123456782)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00111111 10111111 10011010 11011101 00010101 11011111 00110100 10001000\"\n```\n:::\n\n```{.r .cell-code}\nbits(0.12345678123456783)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00111111 10111111 10011010 11011101 00010101 11011111 00110100 10001000\"\n```\n:::\n\n```{.r .cell-code}\nbits(0.12345678123456784)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00111111 10111111 10011010 11011101 00010101 11011111 00110100 10001001\"\n```\n:::\n:::\n\n## Working with higher precision numbers\n\nThe *Rmpfr* package allows us to work with numbers in higher precision.\n(This code is not working with *knitr*, so I'm just showing the code\nhere, not the output.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(Rmpfr)\npiLong <- Const(\"pi\", prec = 260) # pi \"computed\" to correct 260-bit precision \npiLong # nicely prints 80 digits \nmpfr(\".1234567812345678\", 40)\nmpfr(\".1234567812345678\", 80)\nmpfr(\".1234567812345678\", 600)\n```\n:::\n\nIn contrast to R, Python has arbitrary precision integers. So, e.g.,\n`pow(3423333, 15)` returns an integer. But floating points are handled\nin similar fashion to R.\n\n# 3. Implications for calculations and comparisons\n\n## Computer arithmetic is not mathematical arithmetic!\n\nAs mentioned for integers, computer number arithmetic is not closed,\nunlike real arithmetic. For example, if we multiply two computer\nfloating points, we can overflow and not get back another computer\nfloating point. One term that is used, which might pop up in an error\nmessage (though probably not in R) is that an \"exception\" is \"thrown\".\n\nAnother mathematical concept we should consider here is that computer\narithmetic does not obey the associative and distributive laws, i.e.,\n$(a+b)+c$ may not equal $a+(b+c)$ on a computer and $a(b+c)$ may not be\nthe same as $ab+ac$. Here's an example with multiplication:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nval1 <- 1/10; val2 <- 0.31; val3 <- 0.57\nres1 <- val1*val2*val3\nres2 <- val3*val2*val1\nidentical(res1, res2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ndg(res1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.01766999999999999821\"\n```\n:::\n\n```{.r .cell-code}\ndg(res2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0.01767000000000000168\"\n```\n:::\n:::\n\n## Calculating with integers vs. floating points\n\nIt's important to note that operations with integers are fast and exact\n(but can easily overflow) while operations with floating points are\nslower and approximate. Because of this slowness, floating point\noperations (*flops*) dominate calculation intensity and are used as the\nmetric for the amount of work being done - a multiplication (or\ndivision) combined with an addition (or subtraction) is one flop. We'll\ntalk a lot about flops in the unit on linear algebra.\n\n## Comparisons\n\nAs we saw, we should never test `a==b` unless (1) *a* and *b* are\nrepresented as integers in R, (2) they are integer-valued but stored as\ndoubles that are small enough that they can be stored exactly) or (3)\nthey are decimal numbers that have been created in the same way (e.g.,\n`0.4-0.3==0.4-0.3` returns `TRUE` but `0.1==0.4-0.3` does not). Similarly we should be careful\nabout testing `a==0`. And be careful of greater than/less than\ncomparisons. For example, be careful of `x[ x < 0 ] <- NA` if what you\nare looking for is values that might be *mathematically* less than zero,\nrather than whatever is *numerically* less than zero.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4L - 3L == 1L\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n4.0 - 3.0 == 1.0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n4.1 - 3.1 == 1.0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\nOne nice approach to checking for approximate equality is to make use of\n*machine epsilon*. If the relative spacing of two numbers is less than\n*machine epsilon*, then for our computer approximation, we say they are\nthe same. Here's an implementation that relies on the absolute spacing\nbeing $x\\epsilon$ (see above).\n\n\n::: {.cell}\n\n```{.r .cell-code}\na = 12345678123456781000\nb = 12345678123456782000\n\napproxEqual = function(a, b){\n  if(abs(a - b) < .Machine$double.eps * abs(a + b))\n    print(\"approximately equal\") else print (\"not equal\")\n}\n\napproxEqual(a,b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"approximately equal\"\n```\n:::\n\n```{.r .cell-code}\na = 1234567812345678\nb = 1234567812345677\n\napproxEqual(a,b)   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"not equal\"\n```\n:::\n:::\n\nActually, we probably want to use a number slightly larger than\n*.Machine\\$double.eps* to be safe. You can also take a look at the R\nfunction *all.equal.numeric()*.\n\nFinally, in computing, we often encounter the use of an unusual integer\nas a symbol for missing values. E.g., a datafile might store missing\nvalues as -9999. Testing for this using == in R should generally be\nok:` x [ x == -9999 ] <- NA`, both because integers of this magnitude\nare stored exactly and because the -9999 values would presumably have\nbeen created in the same way. To be really careful, you can read in as\ncharacter type and do the assessment before converting to numeric.\n\n## Calculations\n\nGiven the limited *precision* of computer numbers, we need to be careful\nwhen in the following two situations.\n\n1.  Subtracting large numbers that are nearly equal (or adding negative\n    and positive numbers of the same magnitude). You won't have the\n    precision in the answer that you would like. How many decimal places\n    of accuracy do we have here?\n\n    \n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # catastrophic cancellation w/ large numbers\n    dg(123456781234.56 - 123456781234.00)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"0.55999755859375000000\"\n    ```\n    :::\n    :::\n\n    The absolute error in the original numbers here is of the order\n    $\\epsilon x=2.2\\times10^{-16}\\cdot1\\times10^{11}\\approx1\\times10^{-5}=.00001$.\n    While we might think that the result is close to the value 1 and\n    should have error of about machine epsilon, the relevant absolute\n    error is in the original numbers, so we actually only have about\n    five significant digits in our result because we cancel out the\n    other digits.\n\n    This is called *catastrophic cancellation*, because most of the\n    digits that are left represent rounding error -- many of the significant\n    digits have cancelled with each other.\\\n    Here's catastrophic cancellation with small numbers. The right\n    answer here is exactly 0.000000000000000000001234.\n\n    \n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # catastrophic cancellation w/ small numbers\n    a = .000000000000123412341234\n    b = .000000000000123412340000\n    \n    # so we know the right answer is .000000000000000000001234 EXACTLY  \n    \n    dg(a-b, 35)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"0.00000000000000000000123399999315140\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    ## [1] \"0.00000000000000000000123399999315140\"\n    ```\n    :::\n\n    But the result is accurate only to 8 places + 20 = 28 decimal\n    places, as expected from a machine precision-based calculation,\n    since the \"1\" is in the 13th position, after 12 zeroes (12+16=28).\n    Ideally, we would have accuracy to 36 places (16 digits + the 20\n    zeroes), but we've lost 8 digits to catastrophic cancellation.\n\n    It's best to do any subtraction on numbers that are not too large.\n    For example, if we compute the sum of squares in a naive way, we can\n    lose all of the information in the calculation because the\n    information is in digits that are not computed or stored accurately:\n\n\n    $$s^{2}=\\sum x_{i}^{2}-n\\bar{x}^{2}$$\n\n\n\n    \n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ## No problem here:\n    x <- c(-1, 0, 1)\n    n <- length(x)\n    sum(x^2)-n*mean(x)^2 \n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 2\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    sum((x - mean(x))^2)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 2\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    ## Adding/subtracting a constant shouldn't change the result:\n    x <- x + 1e8\n    sum(x^2)-n*mean(x)^2  # the result of this is not good!\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 0\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    sum((x - mean(x))^2)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 2\n    ```\n    :::\n    :::\n\n    A good principle to take away is to subtract off a number similar in\n    magnitude to the values (in this case $\\bar{x}$ is obviously ideal)\n    and adjust your calculation accordingly. In general, you can\n    sometimes rearrange your calculation to avoid catastrophic\n    cancellation. Another example involves the quadratic formula for\n    finding a root (p. 101 of Gentle).\n\n2.  Adding or subtracting numbers that are very different in magnitude.\n    The precision will be that of the large magnitude number, since we\n    can only represent that number to a certain absolute accuracy, which\n    is much less than the absolute accuracy of the smaller number:\n\n    \n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dg(123456781234.2)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"123456781234.19999694824218750000\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    dg(123456781234.2 - 0.1)        # truth: 123456781234.1\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"123456781234.09999084472656250000\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    dg(123456781234.2 - 0.01)       # truth: 123456781234.19\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"123456781234.19000244140625000000\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    dg(123456781234.2 - 0.001)      # truth: 123456781234.199\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"123456781234.19898986816406250000\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    dg(123456781234.2 - 0.0001)     # truth: 123456781234.1999\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"123456781234.19989013671875000000\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    dg(123456781234.2 - 0.00001)    # truth: 123456781234.19999\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"123456781234.19998168945312500000\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    dg(123456781234.2 - 0.000001)   # truth: 123456781234.199999\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"123456781234.19999694824218750000\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    123456781234.2 - 0.000001 == 123456781234.2\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] TRUE\n    ```\n    :::\n    :::\n\n    The larger number in the calculations above is of magnitude\n    $10^{11}$, so the absolute error in representing the larger number\n    is around $1\\times10^{^{-5}}$. Thus in the calculations above we can\n    only expect the answers to be accurate to about $1\\times10^{-5}$. In\n    the last calculation above, the smaller number is smaller than\n    $1\\times10^{-5}$ and so doing the subtraction has had no effect.\n    This is analogous to trying to do $1+1\\times10^{-16}$ and seeing\n    that the result is still 1.\\\n    A work-around when we are adding numbers of very different\n    magnitudes is to add a set of numbers in increasing order. However,\n    if the numbers are all of similar magnitude, then by the time you\n    add ones later in the summation, the partial sum will be much larger\n    than the new term. A (second) work-around to that problem is to add\n    the numbers in a tree-like fashion, so that each addition involves a\n    summation of numbers of similar size.\n\nGiven the limited *range* of computer numbers, be careful when you are:\n\n-   Multiplying or dividing many numbers, particularly large or small\n    ones. Never take the product of many large or small numbers as this\n    can cause over- or under-flow. Rather compute on the log scale and\n    only at the end of your computations should you exponentiate. E.g.,\n\n\n    $$\\prod_{i}x_{i}/\\prod_{j}y_{j}=\\exp(\\sum_{i}\\log x_{i}-\\sum_{j}\\log y_{j})$$\n\n\n\nLet's consider some challenges that illustrate that last concern.\n\n-   Challenge: consider multiclass logistic regression, where you have\n    quantities like this:\n\n\n    $$p_{j}=\\text{Prob}(y=j)=\\frac{\\exp(x\\beta_{j})}{\\sum_{k=1}^{K}\\exp(x\\beta_{k})}=\\frac{\\exp(z_{j})}{\\sum_{k=1}^{K}\\exp(z_{k})}$$\n\n\n    for $z_{k}=x\\beta_{k}$. What will happen if the $z$ values are very\n    large in magnitude (either positive or negative)? How can we\n    reexpress the equation so as to be able to do the calculation? Hint:\n    think about multiplying by $\\frac{c}{c}$ for a carefully chosen $c$.\n\n-   Second challenge: The same issue arises in the following\n    calculation. Suppose I want to calculate a predictive density (e.g.,\n    in a model comparison in a Bayesian context): $$\\begin{aligned}\n    f(y^{*}|y,x) & = & \\int f(y^{*}|y,x,\\theta)\\pi(\\theta|y,x)d\\theta\\\\\n     & \\approx & \\frac{1}{M}\\sum_{j=1}^{m}\\prod_{i=1}^{n}f(y_{i}^{*}|x,\\theta_{j})\\\\\n     & = & \\frac{1}{M}\\sum_{j=1}^{m}\\exp\\sum_{i=1}^{n}\\log f(y_{i}^{*}|x,\\theta_{j})\\\\\n     & \\equiv & \\frac{1}{M}\\sum_{j=1}^{m}\\exp(v_{j})\\end{aligned}$$\n    First, why do I use the log conditional predictive density? Second,\n    let's work with an estimate of the unconditional predictive density\n    on the log scale,\n    $\\log f(y^{*}|y,x)\\approx\\log\\frac{1}{M}\\sum_{j=1}^{m}\\exp(v_{j})$.\n    Now note that $e^{v_{j}}$ may be quite small as $v_{j}$ is the sum\n    of log likelihoods. So what happens if we have terms something like\n    $e^{-1000}$? So we can't exponentiate each individual $v_{j}$. This\n    is what is known as the \"log sum of exponentials\" problem (and the\n    solution as the \"log-sum-exp trick\"). Thoughts?\n\nNumerical issues come up frequently in linear algebra. For example, they\ncome up in working with positive definite and semi-positive-definite\nmatrices, such as covariance matrices. You can easily get negative\nnumerical eigenvalues even if all the eigenvalues are positive or\nnon-negative. Here's an example where we use an squared exponential\ncorrelation as a function of time (or distance in 1-d), which is\n*mathematically* positive definite (i.e., all the eigenvalues are\npositive) but not numerically positive definite:\n\n\n::: {.cell hash='unit8-numbers_cache/pdf/unnamed-chunk-29_7dc68dd58c6b58c8ffba1950d3a94436'}\n\n```{.r .cell-code}\nxs <- 1:100\ndists <- fields::rdist(xs)\ncorMat <- exp(- (dists/10)^2) # this is a p.d. matrix (mathematically)\ndg(eigen(corMat)$values[80:100])  # but not numerically\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"-0.00000000000000005935\" \"-0.00000000000000006021\"\n [3] \"-0.00000000000000006401\" \"-0.00000000000000006473\"\n [5] \"-0.00000000000000007597\" \"-0.00000000000000008904\"\n [7] \"-0.00000000000000009388\" \"-0.00000000000000009581\"\n [9] \"-0.00000000000000011133\" \"-0.00000000000000011487\"\n[11] \"-0.00000000000000012511\" \"-0.00000000000000013184\"\n[13] \"-0.00000000000000014807\" \"-0.00000000000000014981\"\n[15] \"-0.00000000000000016497\" \"-0.00000000000000016666\"\n[17] \"-0.00000000000000016699\" \"-0.00000000000000018564\"\n[19] \"-0.00000000000000018859\" \"-0.00000000000000021561\"\n[21] \"-0.00000000000000073151\"\n```\n:::\n:::\n\n## Final note\n\nHow the computer actually does arithmetic with the floating point\nrepresentation in base 2 gets pretty complicated, and we won't go into\nthe details. These rules of thumb should be enough for our practical\npurposes. Monahan and the URL reference have many of the gory details.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}